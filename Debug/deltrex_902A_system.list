
deltrex_902A_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002518  08002518  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002518  08002518  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002518  08002518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002590  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007975  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001698  00000000  00000000  00027a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  000290a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00029730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017de3  00000000  00000000  00029d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007009  00000000  00000000  00041b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e62  00000000  00000000  00048b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  000cc9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002474 	.word	0x08002474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002474 	.word	0x08002474

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb99 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82b 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f895 	bl	8000288 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f869 	bl	8000234 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 8000162:	4812      	ldr	r0, [pc, #72]	; (80001ac <main+0x60>)
 8000164:	f000 f9de 	bl	8000524 <RetargetInit>
	bool door_1_unlocked = true;
 8000168:	2301      	movs	r3, #1
 800016a:	71fb      	strb	r3, [r7, #7]
	bool door_2_unlocked = true;
 800016c:	2301      	movs	r3, #1
 800016e:	71bb      	strb	r3, [r7, #6]
	bool waiting_on_release = false;
 8000170:	2300      	movs	r3, #0
 8000172:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	is_pushed_to_lock_pressed(&door_1_unlocked, &door_2_unlocked, &waiting_on_release);
 8000174:	1d7a      	adds	r2, r7, #5
 8000176:	1db9      	adds	r1, r7, #6
 8000178:	1dfb      	adds	r3, r7, #7
 800017a:	4618      	mov	r0, r3
 800017c:	f000 f902 	bl	8000384 <is_pushed_to_lock_pressed>
  	check_door_1_status(&door_1_unlocked, &door_2_unlocked);
 8000180:	1dba      	adds	r2, r7, #6
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	4611      	mov	r1, r2
 8000186:	4618      	mov	r0, r3
 8000188:	f000 f92c 	bl	80003e4 <check_door_1_status>
		update_door_1_leds(&door_1_unlocked);
 800018c:	1dfb      	adds	r3, r7, #7
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f94c 	bl	800042c <update_door_1_leds>
		check_door_2_status(&door_1_unlocked, &door_2_unlocked);
 8000194:	1dba      	adds	r2, r7, #6
 8000196:	1dfb      	adds	r3, r7, #7
 8000198:	4611      	mov	r1, r2
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f96e 	bl	800047c <check_door_2_status>
		update_door_2_leds(&door_2_unlocked);
 80001a0:	1dbb      	adds	r3, r7, #6
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f990 	bl	80004c8 <update_door_2_leds>
  	is_pushed_to_lock_pressed(&door_1_unlocked, &door_2_unlocked, &waiting_on_release);
 80001a8:	e7e4      	b.n	8000174 <main+0x28>
 80001aa:	bf00      	nop
 80001ac:	20000098 	.word	0x20000098

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fd46 	bl	8001c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	2302      	movs	r3, #2
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e2:	2300      	movs	r3, #0
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fe8f 	bl	8000f14 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001fc:	f000 f98c 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f8fa 	bl	8001414 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000226:	f000 f977 	bl	8000518 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MX_USART2_UART_Init+0x50>)
 800023c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800025a:	220c      	movs	r2, #12
 800025c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800026c:	f001 fa6c 	bl	8001748 <HAL_UART_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000276:	f000 f94f 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000098 	.word	0x20000098
 8000284:	40004400 	.word	0x40004400

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	4b35      	ldr	r3, [pc, #212]	; (8000374 <MX_GPIO_Init+0xec>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a34      	ldr	r2, [pc, #208]	; (8000374 <MX_GPIO_Init+0xec>)
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b32      	ldr	r3, [pc, #200]	; (8000374 <MX_GPIO_Init+0xec>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0310 	and.w	r3, r3, #16
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <MX_GPIO_Init+0xec>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a2e      	ldr	r2, [pc, #184]	; (8000374 <MX_GPIO_Init+0xec>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b2c      	ldr	r3, [pc, #176]	; (8000374 <MX_GPIO_Init+0xec>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0320 	and.w	r3, r3, #32
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b29      	ldr	r3, [pc, #164]	; (8000374 <MX_GPIO_Init+0xec>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a28      	ldr	r2, [pc, #160]	; (8000374 <MX_GPIO_Init+0xec>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b26      	ldr	r3, [pc, #152]	; (8000374 <MX_GPIO_Init+0xec>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b23      	ldr	r3, [pc, #140]	; (8000374 <MX_GPIO_Init+0xec>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a22      	ldr	r2, [pc, #136]	; (8000374 <MX_GPIO_Init+0xec>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <MX_GPIO_Init+0xec>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8000302:	481d      	ldr	r0, [pc, #116]	; (8000378 <MX_GPIO_Init+0xf0>)
 8000304:	f000 fdcb 	bl	8000e9e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800030e:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MX_GPIO_Init+0xf4>)
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <MX_GPIO_Init+0xf8>)
 800031e:	f000 fc23 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000322:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 8000326:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	480f      	ldr	r0, [pc, #60]	; (8000378 <MX_GPIO_Init+0xf0>)
 800033c:	f000 fc14 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000340:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	4619      	mov	r1, r3
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <MX_GPIO_Init+0xf0>)
 8000356:	f000 fc07 	bl	8000b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	2028      	movs	r0, #40	; 0x28
 8000360:	f000 fbcb 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000364:	2028      	movs	r0, #40	; 0x28
 8000366:	f000 fbe4 	bl	8000b32 <HAL_NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	3720      	adds	r7, #32
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800
 800037c:	10110000 	.word	0x10110000
 8000380:	40011000 	.word	0x40011000

08000384 <is_pushed_to_lock_pressed>:

/* USER CODE BEGIN 4 */
void is_pushed_to_lock_pressed(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr, bool *waiting_on_release_ptr)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	bool pressed_down = HAL_GPIO_ReadPin(GPIOA, PUSH_TO_LOCK) == 0;
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <is_pushed_to_lock_pressed+0x5c>)
 8000394:	f000 fd6c 	bl	8000e70 <HAL_GPIO_ReadPin>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf0c      	ite	eq
 800039e:	2301      	moveq	r3, #1
 80003a0:	2300      	movne	r3, #0
 80003a2:	75fb      	strb	r3, [r7, #23]

	if (!pressed_down && *waiting_on_release_ptr) {
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	f083 0301 	eor.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00d      	beq.n	80003cc <is_pushed_to_lock_pressed+0x48>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d009      	beq.n	80003cc <is_pushed_to_lock_pressed+0x48>
		*door_1_unlocked_ptr = false;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		*door_2_unlocked_ptr = false;
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
		*waiting_on_release_ptr = false;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
	} else if (pressed_down) {
		*waiting_on_release_ptr = true;
	}
}
 80003ca:	e005      	b.n	80003d8 <is_pushed_to_lock_pressed+0x54>
	} else if (pressed_down) {
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <is_pushed_to_lock_pressed+0x54>
		*waiting_on_release_ptr = true;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40010800 	.word	0x40010800

080003e4 <check_door_1_status>:

void check_door_1_status(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	bool door_1_opened = HAL_GPIO_ReadPin(GPIOA, DOOR_1_SWITCH) == 0;
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <check_door_1_status+0x44>)
 80003f2:	f000 fd3d 	bl	8000e70 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]

	/* Check if door 1 is unlocked. */
	if (*door_1_unlocked_ptr) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00a      	beq.n	8000420 <check_door_1_status+0x3c>
		/* Check if door 1 is opened. If so, lock door 2. */
		if (door_1_opened) {
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d003      	beq.n	8000418 <check_door_1_status+0x34>
			*door_2_unlocked_ptr = false;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		} else {
			*door_2_unlocked_ptr = true;
		}
	}

	return;
 8000416:	e003      	b.n	8000420 <check_door_1_status+0x3c>
			*door_2_unlocked_ptr = true;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
	return;
 800041e:	bf00      	nop
 8000420:	bf00      	nop
}
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010800 	.word	0x40010800

0800042c <update_door_1_leds>:

void update_door_1_leds(bool *door_1_unlocked_ptr)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	if (*door_1_unlocked_ptr) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00c      	beq.n	8000456 <update_door_1_leds+0x2a>
		HAL_GPIO_WritePin(GPIOA, DOOR_1_RED_LED, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <update_door_1_leds+0x4c>)
 8000444:	f000 fd2b 	bl	8000e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOOR_1_GREEN_LED, 1);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <update_door_1_leds+0x4c>)
 8000450:	f000 fd25 	bl	8000e9e <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, DOOR_1_RED_LED, 1);
		HAL_GPIO_WritePin(GPIOA, DOOR_1_GREEN_LED, 0);
	}
	return;
 8000454:	e00c      	b.n	8000470 <update_door_1_leds+0x44>
		HAL_GPIO_WritePin(GPIOA, DOOR_1_RED_LED, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800045c:	4806      	ldr	r0, [pc, #24]	; (8000478 <update_door_1_leds+0x4c>)
 800045e:	f000 fd1e 	bl	8000e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOOR_1_GREEN_LED, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <update_door_1_leds+0x4c>)
 800046a:	f000 fd18 	bl	8000e9e <HAL_GPIO_WritePin>
	return;
 800046e:	bf00      	nop
}
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010800 	.word	0x40010800

0800047c <check_door_2_status>:

void check_door_2_status(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	bool door_2_opened = HAL_GPIO_ReadPin(GPIOA, DOOR_2_SWITCH) == 0;
 8000486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <check_door_2_status+0x48>)
 800048c:	f000 fcf0 	bl	8000e70 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	bf0c      	ite	eq
 8000496:	2301      	moveq	r3, #1
 8000498:	2300      	movne	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]

	/* Check if door 2 is unlocked. */
	if (*door_2_unlocked_ptr) {
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d00a      	beq.n	80004ba <check_door_2_status+0x3e>
		/* Check if door 2 is opened. If so, lock door 1. */
		if (door_2_opened) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d003      	beq.n	80004b2 <check_door_2_status+0x36>
			*door_1_unlocked_ptr = false;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
		} else {
			*door_1_unlocked_ptr = true;
		}
	}
	return;
 80004b0:	e003      	b.n	80004ba <check_door_2_status+0x3e>
			*door_1_unlocked_ptr = true;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
	return;
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
}
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40010800 	.word	0x40010800

080004c8 <update_door_2_leds>:

void update_door_2_leds(bool *door_2_unlocked_ptr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (*door_2_unlocked_ptr) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00c      	beq.n	80004f2 <update_door_2_leds+0x2a>
		HAL_GPIO_WritePin(GPIOA, DOOR_2_RED_LED, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <update_door_2_leds+0x4c>)
 80004e0:	f000 fcdd 	bl	8000e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOOR_2_GREEN_LED, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <update_door_2_leds+0x4c>)
 80004ec:	f000 fcd7 	bl	8000e9e <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, DOOR_2_RED_LED, 1);
		HAL_GPIO_WritePin(GPIOA, DOOR_2_GREEN_LED, 0);
	}
	return;
 80004f0:	e00c      	b.n	800050c <update_door_2_leds+0x44>
		HAL_GPIO_WritePin(GPIOA, DOOR_2_RED_LED, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <update_door_2_leds+0x4c>)
 80004fa:	f000 fcd0 	bl	8000e9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOOR_2_GREEN_LED, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <update_door_2_leds+0x4c>)
 8000506:	f000 fcca 	bl	8000e9e <HAL_GPIO_WritePin>
	return;
 800050a:	bf00      	nop
}
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010800 	.word	0x40010800

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <RetargetInit+0x28>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <RetargetInit+0x2c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6898      	ldr	r0, [r3, #8]
 8000538:	2300      	movs	r3, #0
 800053a:	2202      	movs	r2, #2
 800053c:	2100      	movs	r1, #0
 800053e:	f001 fb8f 	bl	8001c60 <setvbuf>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000dc 	.word	0x200000dc
 8000550:	2000000c 	.word	0x2000000c

08000554 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d002      	beq.n	800056c <_write+0x18>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d111      	bne.n	8000590 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <_write+0x54>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	b29a      	uxth	r2, r3
 8000574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000578:	68b9      	ldr	r1, [r7, #8]
 800057a:	f001 f932 	bl	80017e2 <HAL_UART_Transmit>
 800057e:	4603      	mov	r3, r0
 8000580:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <_write+0x38>
      return len;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	e008      	b.n	800059e <_write+0x4a>
    else
      return EIO;
 800058c:	2305      	movs	r3, #5
 800058e:	e006      	b.n	800059e <_write+0x4a>
  }
  errno = EBADF;
 8000590:	f001 fb34 	bl	8001bfc <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	2209      	movs	r2, #9
 8000598:	601a      	str	r2, [r3, #0]
  return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000dc 	.word	0x200000dc

080005ac <_close>:

int _close(int fd) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db04      	blt.n	80005c4 <_close+0x18>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	dc01      	bgt.n	80005c4 <_close+0x18>
    return 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e006      	b.n	80005d2 <_close+0x26>

  errno = EBADF;
 80005c4:	f001 fb1a 	bl	8001bfc <__errno>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2209      	movs	r2, #9
 80005cc:	601a      	str	r2, [r3, #0]
  return -1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80005e6:	f001 fb09 	bl	8001bfc <__errno>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2209      	movs	r2, #9
 80005ee:	601a      	str	r2, [r3, #0]
  return -1;
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_read>:

int _read(int fd, char* ptr, int len) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d110      	bne.n	8000630 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <_read+0x4c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000616:	2201      	movs	r2, #1
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	f001 f974 	bl	8001906 <HAL_UART_Receive>
 800061e:	4603      	mov	r3, r0
 8000620:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <_read+0x30>
      return 1;
 8000628:	2301      	movs	r3, #1
 800062a:	e008      	b.n	800063e <_read+0x42>
    else
      return EIO;
 800062c:	2305      	movs	r3, #5
 800062e:	e006      	b.n	800063e <_read+0x42>
  }
  errno = EBADF;
 8000630:	f001 fae4 	bl	8001bfc <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	2209      	movs	r2, #9
 8000638:	601a      	str	r2, [r3, #0]
  return -1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000dc 	.word	0x200000dc

0800064c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db08      	blt.n	800066e <_fstat+0x22>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b02      	cmp	r3, #2
 8000660:	dc05      	bgt.n	800066e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000668:	605a      	str	r2, [r3, #4]
    return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e005      	b.n	800067a <_fstat+0x2e>
  }

  errno = EBADF;
 800066e:	f001 fac5 	bl	8001bfc <__errno>
 8000672:	4603      	mov	r3, r0
 8000674:	2209      	movs	r2, #9
 8000676:	601a      	str	r2, [r3, #0]
  return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_MspInit+0x5c>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_MspInit+0x5c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_MspInit+0x5c>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x5c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_MspInit+0x60>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <HAL_MspInit+0x60>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010000 	.word	0x40010000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x70>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d123      	bne.n	8000750 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_UART_MspInit+0x74>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <HAL_UART_MspInit+0x74>)
 800070e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000712:	61d3      	str	r3, [r2, #28]
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_UART_MspInit+0x74>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_UART_MspInit+0x74>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <HAL_UART_MspInit+0x74>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_UART_MspInit+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000738:	230c      	movs	r3, #12
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_UART_MspInit+0x78>)
 800074c:	f000 fa0c 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40004400 	.word	0x40004400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f8b3 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007ba:	f000 fb89 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f001 fa02 	bl	8001bfc <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	2000008c 	.word	0x2000008c
 800082c:	200000f8 	.word	0x200000f8

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000862:	f7ff ffe5 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f001 f9cf 	bl	8001c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc6f 	bl	800014c <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000878:	08002520 	.word	0x08002520
  ldr r2, =_sbss
 800087c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000880:	200000f4 	.word	0x200000f4

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f923 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff feee 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f93b 	bl	8000b4e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f0:	f000 f903 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	200000e0 	.word	0x200000e0

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	200000e0 	.word	0x200000e0

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff2d 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff42 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff35 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e169      	b.n	8000e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8158 	bne.w	8000e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a9a      	ldr	r2, [pc, #616]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d05e      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d875      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000baa:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d058      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bb0:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d86f      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a96      	ldr	r2, [pc, #600]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d052      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bbc:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2a8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d869      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a94      	ldr	r2, [pc, #592]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d04c      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d863      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bce:	4a92      	ldr	r2, [pc, #584]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d046      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a90      	ldr	r2, [pc, #576]	; (8000e18 <HAL_GPIO_Init+0x2b0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d85d      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d82a      	bhi.n	8000c34 <HAL_GPIO_Init+0xcc>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d859      	bhi.n	8000c96 <HAL_GPIO_Init+0x12e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <HAL_GPIO_Init+0x80>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c3d 	.word	0x08000c3d
 8000bf0:	08000c4f 	.word	0x08000c4f
 8000bf4:	08000c91 	.word	0x08000c91
 8000bf8:	08000c97 	.word	0x08000c97
 8000bfc:	08000c97 	.word	0x08000c97
 8000c00:	08000c97 	.word	0x08000c97
 8000c04:	08000c97 	.word	0x08000c97
 8000c08:	08000c97 	.word	0x08000c97
 8000c0c:	08000c97 	.word	0x08000c97
 8000c10:	08000c97 	.word	0x08000c97
 8000c14:	08000c97 	.word	0x08000c97
 8000c18:	08000c97 	.word	0x08000c97
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c97 	.word	0x08000c97
 8000c24:	08000c97 	.word	0x08000c97
 8000c28:	08000c97 	.word	0x08000c97
 8000c2c:	08000c45 	.word	0x08000c45
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	4a79      	ldr	r2, [pc, #484]	; (8000e1c <HAL_GPIO_Init+0x2b4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3a:	e02c      	b.n	8000c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e029      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e024      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	3308      	adds	r3, #8
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e01f      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e01a      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e013      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d105      	bne.n	8000c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	611a      	str	r2, [r3, #16]
          break;
 8000c82:	e009      	b.n	8000c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	615a      	str	r2, [r3, #20]
          break;
 8000c8e:	e003      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x130>
          break;
 8000c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d801      	bhi.n	8000ca2 <HAL_GPIO_Init+0x13a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	e001      	b.n	8000ca6 <HAL_GPIO_Init+0x13e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2bff      	cmp	r3, #255	; 0xff
 8000cac:	d802      	bhi.n	8000cb4 <HAL_GPIO_Init+0x14c>
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x152>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3b08      	subs	r3, #8
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	6a39      	ldr	r1, [r7, #32]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d013      	beq.n	8000d54 <HAL_GPIO_Init+0x1ec>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x2c8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1e4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d44:	2303      	movs	r3, #3
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x1ee>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d66:	492f      	ldr	r1, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	492c      	ldr	r1, [pc, #176]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4928      	ldr	r1, [pc, #160]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4922      	ldr	r1, [pc, #136]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	491e      	ldr	r1, [pc, #120]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	4918      	ldr	r1, [pc, #96]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	608b      	str	r3, [r1, #8]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d021      	beq.n	8000e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60cb      	str	r3, [r1, #12]
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x2e2>
 8000e06:	bf00      	nop
 8000e08:	10320000 	.word	0x10320000
 8000e0c:	10310000 	.word	0x10310000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10120000 	.word	0x10120000
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4909      	ldr	r1, [pc, #36]	; (8000e6c <HAL_GPIO_Init+0x304>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f ae8e 	bne.w	8000b7c <HAL_GPIO_Init+0x14>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	372c      	adds	r7, #44	; 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eae:	787b      	ldrb	r3, [r7, #1]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eba:	e003      	b.n	8000ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	041a      	lsls	r2, r3, #16
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	611a      	str	r2, [r3, #16]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f806 	bl	8000f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e26c      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d112      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d10b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	4b89      	ldr	r3, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d06c      	beq.n	8001040 <HAL_RCC_OscConfig+0x12c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d168      	bne.n	8001040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e246      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a7f      	ldr	r2, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7a      	ldr	r2, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a77      	ldr	r2, [pc, #476]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xbc>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a71      	ldr	r2, [pc, #452]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a67      	ldr	r2, [pc, #412]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fca2 	bl	8000938 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc9e 	bl	8000938 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1fa      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe4>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc8e 	bl	8000938 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fc8a 	bl	8000938 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1e6      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x10c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
 8001066:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1ba      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc43 	bl	8000938 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc3f 	bl	8000938 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e19b      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc22 	bl	8000938 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc1e 	bl	8000938 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e17a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03a      	beq.n	8001198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc02 	bl	8000938 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fbfe 	bl	8000938 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e15a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 fad8 	bl	800170c <RCC_Delay>
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fbe8 	bl	8000938 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e00f      	b.n	800118c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fbe4 	bl	8000938 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d908      	bls.n	800118c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e140      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	42420000 	.word	0x42420000
 8001188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e9      	bne.n	800116c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a6 	beq.w	80012f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a93      	ldr	r2, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b8e      	ldr	r3, [pc, #568]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fba5 	bl	8000938 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fba1 	bl	8000938 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0fd      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x312>
 8001218:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x334>
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x356>
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a6c      	ldr	r2, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a69      	ldr	r2, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a66      	ldr	r2, [pc, #408]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb55 	bl	8000938 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb51 	bl	8000938 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0ab      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x37e>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb3f 	bl	8000938 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb3b 	bl	8000938 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e095      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8081 	beq.w	80013fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d061      	beq.n	80013cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d146      	bne.n	800139e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb0f 	bl	8000938 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb0b 	bl	8000938 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e067      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	492d      	ldr	r1, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	430b      	orrs	r3, r1
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fadf 	bl	8000938 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fadb 	bl	8000938 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e037      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x46a>
 800139c:	e02f      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fac8 	bl	8000938 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fac4 	bl	8000938 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e020      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x498>
 80013ca:	e018      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420060 	.word	0x42420060

08001414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0d0      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d910      	bls.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	4965      	ldr	r1, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d040      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d115      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e073      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06b      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fa18 	bl	8000938 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff fa14 	bl	8000938 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e053      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d210      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4922      	ldr	r1, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1cc>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f976 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	0800249c 	.word	0x0800249c
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	b490      	push	{r4, r7}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f0:	1d3c      	adds	r4, r7, #4
 80015f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f8:	f240 2301 	movw	r3, #513	; 0x201
 80015fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x46>
 8001626:	e02d      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162a:	623b      	str	r3, [r7, #32]
      break;
 800162c:	e02d      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0c5b      	lsrs	r3, r3, #17
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165a:	4413      	add	r3, r2
 800165c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001666:	fb02 f203 	mul.w	r2, r2, r3
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e004      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	623b      	str	r3, [r7, #32]
      break;
 8001682:	e002      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001686:	623b      	str	r3, [r7, #32]
      break;
 8001688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168a:	6a3b      	ldr	r3, [r7, #32]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bc90      	pop	{r4, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	0800248c 	.word	0x0800248c
 800169c:	40021000 	.word	0x40021000
 80016a0:	007a1200 	.word	0x007a1200
 80016a4:	003d0900 	.word	0x003d0900

080016a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c0:	f7ff fff2 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4903      	ldr	r1, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	080024ac 	.word	0x080024ac

080016e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0adb      	lsrs	r3, r3, #11
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	080024ac 	.word	0x080024ac

0800170c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <RCC_Delay+0x34>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <RCC_Delay+0x38>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a5b      	lsrs	r3, r3, #9
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001728:	bf00      	nop
  }
  while (Delay --);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	60fa      	str	r2, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <RCC_Delay+0x1c>
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000000 	.word	0x20000000
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e03f      	b.n	80017da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe ffba 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800178a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f9a7 	bl	8001ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b08a      	sub	sp, #40	; 0x28
 80017e6:	af02      	add	r7, sp, #8
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d17c      	bne.n	80018fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_UART_Transmit+0x2c>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e075      	b.n	80018fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_UART_Transmit+0x3e>
 800181c:	2302      	movs	r3, #2
 800181e:	e06e      	b.n	80018fe <HAL_UART_Transmit+0x11c>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001836:	f7ff f87f 	bl	8000938 <HAL_GetTick>
 800183a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	88fa      	ldrh	r2, [r7, #6]
 8001840:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001850:	d108      	bne.n	8001864 <HAL_UART_Transmit+0x82>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d104      	bne.n	8001864 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	e003      	b.n	800186c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001874:	e02a      	b.n	80018cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2200      	movs	r2, #0
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f8e2 	bl	8001a4a <UART_WaitOnFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e036      	b.n	80018fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	3302      	adds	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	e007      	b.n	80018be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1cf      	bne.n	8001876 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f8b2 	bl	8001a4a <UART_WaitOnFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e006      	b.n	80018fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b08a      	sub	sp, #40	; 0x28
 800190a:	af02      	add	r7, sp, #8
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b20      	cmp	r3, #32
 8001924:	f040 808c 	bne.w	8001a40 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_UART_Receive+0x2e>
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e084      	b.n	8001a42 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_UART_Receive+0x40>
 8001942:	2302      	movs	r3, #2
 8001944:	e07d      	b.n	8001a42 <HAL_UART_Receive+0x13c>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2222      	movs	r2, #34	; 0x22
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001962:	f7fe ffe9 	bl	8000938 <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197c:	d108      	bne.n	8001990 <HAL_UART_Receive+0x8a>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	e003      	b.n	8001998 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80019a0:	e043      	b.n	8001a2a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2120      	movs	r1, #32
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f84c 	bl	8001a4a <UART_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e042      	b.n	8001a42 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	3302      	adds	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	e01f      	b.n	8001a1c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d007      	beq.n	80019f6 <HAL_UART_Receive+0xf0>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_UART_Receive+0xfe>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e008      	b.n	8001a16 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1b6      	bne.n	80019a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a5a:	e02c      	b.n	8001ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a62:	d028      	beq.n	8001ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a6a:	f7fe ff65 	bl	8000938 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d21d      	bcs.n	8001ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e00f      	b.n	8001ad6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d0c3      	beq.n	8001a5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b1a:	f023 030c 	bic.w	r3, r3, #12
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <UART_SetConfig+0x114>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d103      	bne.n	8001b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b48:	f7ff fdcc 	bl	80016e4 <HAL_RCC_GetPCLK2Freq>
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	e002      	b.n	8001b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b50:	f7ff fdb4 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009a      	lsls	r2, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <UART_SetConfig+0x118>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	0119      	lsls	r1, r3, #4
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009a      	lsls	r2, r3, #2
 8001b80:	441a      	add	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <UART_SetConfig+0x118>)
 8001b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2064      	movs	r0, #100	; 0x64
 8001b96:	fb00 f303 	mul.w	r3, r0, r3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	3332      	adds	r3, #50	; 0x32
 8001ba0:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <UART_SetConfig+0x118>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bac:	4419      	add	r1, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009a      	lsls	r2, r3, #2
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <UART_SetConfig+0x118>)
 8001bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2064      	movs	r0, #100	; 0x64
 8001bce:	fb00 f303 	mul.w	r3, r0, r3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	3332      	adds	r3, #50	; 0x32
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <UART_SetConfig+0x118>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	f003 020f 	and.w	r2, r3, #15
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	440a      	add	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	51eb851f 	.word	0x51eb851f

08001bfc <__errno>:
 8001bfc:	4b01      	ldr	r3, [pc, #4]	; (8001c04 <__errno+0x8>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <__libc_init_array>:
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	2600      	movs	r6, #0
 8001c0c:	4d0c      	ldr	r5, [pc, #48]	; (8001c40 <__libc_init_array+0x38>)
 8001c0e:	4c0d      	ldr	r4, [pc, #52]	; (8001c44 <__libc_init_array+0x3c>)
 8001c10:	1b64      	subs	r4, r4, r5
 8001c12:	10a4      	asrs	r4, r4, #2
 8001c14:	42a6      	cmp	r6, r4
 8001c16:	d109      	bne.n	8001c2c <__libc_init_array+0x24>
 8001c18:	f000 fc2c 	bl	8002474 <_init>
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	4d0a      	ldr	r5, [pc, #40]	; (8001c48 <__libc_init_array+0x40>)
 8001c20:	4c0a      	ldr	r4, [pc, #40]	; (8001c4c <__libc_init_array+0x44>)
 8001c22:	1b64      	subs	r4, r4, r5
 8001c24:	10a4      	asrs	r4, r4, #2
 8001c26:	42a6      	cmp	r6, r4
 8001c28:	d105      	bne.n	8001c36 <__libc_init_array+0x2e>
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
 8001c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c30:	4798      	blx	r3
 8001c32:	3601      	adds	r6, #1
 8001c34:	e7ee      	b.n	8001c14 <__libc_init_array+0xc>
 8001c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c3a:	4798      	blx	r3
 8001c3c:	3601      	adds	r6, #1
 8001c3e:	e7f2      	b.n	8001c26 <__libc_init_array+0x1e>
 8001c40:	08002518 	.word	0x08002518
 8001c44:	08002518 	.word	0x08002518
 8001c48:	08002518 	.word	0x08002518
 8001c4c:	0800251c 	.word	0x0800251c

08001c50 <memset>:
 8001c50:	4603      	mov	r3, r0
 8001c52:	4402      	add	r2, r0
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d100      	bne.n	8001c5a <memset+0xa>
 8001c58:	4770      	bx	lr
 8001c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c5e:	e7f9      	b.n	8001c54 <memset+0x4>

08001c60 <setvbuf>:
 8001c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c64:	461d      	mov	r5, r3
 8001c66:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <setvbuf+0x17c>)
 8001c68:	4604      	mov	r4, r0
 8001c6a:	681f      	ldr	r7, [r3, #0]
 8001c6c:	460e      	mov	r6, r1
 8001c6e:	4690      	mov	r8, r2
 8001c70:	b127      	cbz	r7, 8001c7c <setvbuf+0x1c>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	b913      	cbnz	r3, 8001c7c <setvbuf+0x1c>
 8001c76:	4638      	mov	r0, r7
 8001c78:	f000 f9d2 	bl	8002020 <__sinit>
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <setvbuf+0x180>)
 8001c7e:	429c      	cmp	r4, r3
 8001c80:	d167      	bne.n	8001d52 <setvbuf+0xf2>
 8001c82:	687c      	ldr	r4, [r7, #4]
 8001c84:	f1b8 0f02 	cmp.w	r8, #2
 8001c88:	d006      	beq.n	8001c98 <setvbuf+0x38>
 8001c8a:	f1b8 0f01 	cmp.w	r8, #1
 8001c8e:	f200 809f 	bhi.w	8001dd0 <setvbuf+0x170>
 8001c92:	2d00      	cmp	r5, #0
 8001c94:	f2c0 809c 	blt.w	8001dd0 <setvbuf+0x170>
 8001c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c9a:	07db      	lsls	r3, r3, #31
 8001c9c:	d405      	bmi.n	8001caa <setvbuf+0x4a>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	0598      	lsls	r0, r3, #22
 8001ca2:	d402      	bmi.n	8001caa <setvbuf+0x4a>
 8001ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ca6:	f000 fa59 	bl	800215c <__retarget_lock_acquire_recursive>
 8001caa:	4621      	mov	r1, r4
 8001cac:	4638      	mov	r0, r7
 8001cae:	f000 f923 	bl	8001ef8 <_fflush_r>
 8001cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cb4:	b141      	cbz	r1, 8001cc8 <setvbuf+0x68>
 8001cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cba:	4299      	cmp	r1, r3
 8001cbc:	d002      	beq.n	8001cc4 <setvbuf+0x64>
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	f000 fa7a 	bl	80021b8 <_free_r>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61a3      	str	r3, [r4, #24]
 8001ccc:	6063      	str	r3, [r4, #4]
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	0619      	lsls	r1, r3, #24
 8001cd2:	d503      	bpl.n	8001cdc <setvbuf+0x7c>
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	6921      	ldr	r1, [r4, #16]
 8001cd8:	f000 fa6e 	bl	80021b8 <_free_r>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	f1b8 0f02 	cmp.w	r8, #2
 8001ce2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	81a3      	strh	r3, [r4, #12]
 8001cec:	d06c      	beq.n	8001dc8 <setvbuf+0x168>
 8001cee:	ab01      	add	r3, sp, #4
 8001cf0:	466a      	mov	r2, sp
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f000 fa33 	bl	8002160 <__swhatbuf_r>
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	4318      	orrs	r0, r3
 8001cfe:	81a0      	strh	r0, [r4, #12]
 8001d00:	2d00      	cmp	r5, #0
 8001d02:	d130      	bne.n	8001d66 <setvbuf+0x106>
 8001d04:	9d00      	ldr	r5, [sp, #0]
 8001d06:	4628      	mov	r0, r5
 8001d08:	f000 fa4e 	bl	80021a8 <malloc>
 8001d0c:	4606      	mov	r6, r0
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d155      	bne.n	8001dbe <setvbuf+0x15e>
 8001d12:	f8dd 9000 	ldr.w	r9, [sp]
 8001d16:	45a9      	cmp	r9, r5
 8001d18:	d14a      	bne.n	8001db0 <setvbuf+0x150>
 8001d1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60a2      	str	r2, [r4, #8]
 8001d22:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001d26:	6022      	str	r2, [r4, #0]
 8001d28:	6122      	str	r2, [r4, #16]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d30:	6162      	str	r2, [r4, #20]
 8001d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	07d2      	lsls	r2, r2, #31
 8001d3a:	81a3      	strh	r3, [r4, #12]
 8001d3c:	d405      	bmi.n	8001d4a <setvbuf+0xea>
 8001d3e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d42:	d102      	bne.n	8001d4a <setvbuf+0xea>
 8001d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d46:	f000 fa0a 	bl	800215e <__retarget_lock_release_recursive>
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	b003      	add	sp, #12
 8001d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <setvbuf+0x184>)
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d101      	bne.n	8001d5c <setvbuf+0xfc>
 8001d58:	68bc      	ldr	r4, [r7, #8]
 8001d5a:	e793      	b.n	8001c84 <setvbuf+0x24>
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <setvbuf+0x188>)
 8001d5e:	429c      	cmp	r4, r3
 8001d60:	bf08      	it	eq
 8001d62:	68fc      	ldreq	r4, [r7, #12]
 8001d64:	e78e      	b.n	8001c84 <setvbuf+0x24>
 8001d66:	2e00      	cmp	r6, #0
 8001d68:	d0cd      	beq.n	8001d06 <setvbuf+0xa6>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	b913      	cbnz	r3, 8001d74 <setvbuf+0x114>
 8001d6e:	4638      	mov	r0, r7
 8001d70:	f000 f956 	bl	8002020 <__sinit>
 8001d74:	f1b8 0f01 	cmp.w	r8, #1
 8001d78:	bf08      	it	eq
 8001d7a:	89a3      	ldrheq	r3, [r4, #12]
 8001d7c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001d80:	bf04      	itt	eq
 8001d82:	f043 0301 	orreq.w	r3, r3, #1
 8001d86:	81a3      	strheq	r3, [r4, #12]
 8001d88:	89a2      	ldrh	r2, [r4, #12]
 8001d8a:	6026      	str	r6, [r4, #0]
 8001d8c:	f012 0308 	ands.w	r3, r2, #8
 8001d90:	d01c      	beq.n	8001dcc <setvbuf+0x16c>
 8001d92:	07d3      	lsls	r3, r2, #31
 8001d94:	bf41      	itttt	mi
 8001d96:	2300      	movmi	r3, #0
 8001d98:	426d      	negmi	r5, r5
 8001d9a:	60a3      	strmi	r3, [r4, #8]
 8001d9c:	61a5      	strmi	r5, [r4, #24]
 8001d9e:	bf58      	it	pl
 8001da0:	60a5      	strpl	r5, [r4, #8]
 8001da2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001da4:	f015 0501 	ands.w	r5, r5, #1
 8001da8:	d115      	bne.n	8001dd6 <setvbuf+0x176>
 8001daa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001dae:	e7c8      	b.n	8001d42 <setvbuf+0xe2>
 8001db0:	4648      	mov	r0, r9
 8001db2:	f000 f9f9 	bl	80021a8 <malloc>
 8001db6:	4606      	mov	r6, r0
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d0ae      	beq.n	8001d1a <setvbuf+0xba>
 8001dbc:	464d      	mov	r5, r9
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	e7d0      	b.n	8001d6a <setvbuf+0x10a>
 8001dc8:	2500      	movs	r5, #0
 8001dca:	e7a8      	b.n	8001d1e <setvbuf+0xbe>
 8001dcc:	60a3      	str	r3, [r4, #8]
 8001dce:	e7e8      	b.n	8001da2 <setvbuf+0x142>
 8001dd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001dd4:	e7b9      	b.n	8001d4a <setvbuf+0xea>
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	e7b7      	b.n	8001d4a <setvbuf+0xea>
 8001dda:	bf00      	nop
 8001ddc:	2000000c 	.word	0x2000000c
 8001de0:	080024d8 	.word	0x080024d8
 8001de4:	080024f8 	.word	0x080024f8
 8001de8:	080024b8 	.word	0x080024b8

08001dec <__sflush_r>:
 8001dec:	898a      	ldrh	r2, [r1, #12]
 8001dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df2:	4605      	mov	r5, r0
 8001df4:	0710      	lsls	r0, r2, #28
 8001df6:	460c      	mov	r4, r1
 8001df8:	d458      	bmi.n	8001eac <__sflush_r+0xc0>
 8001dfa:	684b      	ldr	r3, [r1, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dc05      	bgt.n	8001e0c <__sflush_r+0x20>
 8001e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dc02      	bgt.n	8001e0c <__sflush_r+0x20>
 8001e06:	2000      	movs	r0, #0
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e0e:	2e00      	cmp	r6, #0
 8001e10:	d0f9      	beq.n	8001e06 <__sflush_r+0x1a>
 8001e12:	2300      	movs	r3, #0
 8001e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e18:	682f      	ldr	r7, [r5, #0]
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	d032      	beq.n	8001e84 <__sflush_r+0x98>
 8001e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	075a      	lsls	r2, r3, #29
 8001e24:	d505      	bpl.n	8001e32 <__sflush_r+0x46>
 8001e26:	6863      	ldr	r3, [r4, #4]
 8001e28:	1ac0      	subs	r0, r0, r3
 8001e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e2c:	b10b      	cbz	r3, 8001e32 <__sflush_r+0x46>
 8001e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e30:	1ac0      	subs	r0, r0, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	4602      	mov	r2, r0
 8001e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e38:	4628      	mov	r0, r5
 8001e3a:	6a21      	ldr	r1, [r4, #32]
 8001e3c:	47b0      	blx	r6
 8001e3e:	1c43      	adds	r3, r0, #1
 8001e40:	89a3      	ldrh	r3, [r4, #12]
 8001e42:	d106      	bne.n	8001e52 <__sflush_r+0x66>
 8001e44:	6829      	ldr	r1, [r5, #0]
 8001e46:	291d      	cmp	r1, #29
 8001e48:	d82c      	bhi.n	8001ea4 <__sflush_r+0xb8>
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <__sflush_r+0x108>)
 8001e4c:	40ca      	lsrs	r2, r1
 8001e4e:	07d6      	lsls	r6, r2, #31
 8001e50:	d528      	bpl.n	8001ea4 <__sflush_r+0xb8>
 8001e52:	2200      	movs	r2, #0
 8001e54:	6062      	str	r2, [r4, #4]
 8001e56:	6922      	ldr	r2, [r4, #16]
 8001e58:	04d9      	lsls	r1, r3, #19
 8001e5a:	6022      	str	r2, [r4, #0]
 8001e5c:	d504      	bpl.n	8001e68 <__sflush_r+0x7c>
 8001e5e:	1c42      	adds	r2, r0, #1
 8001e60:	d101      	bne.n	8001e66 <__sflush_r+0x7a>
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	b903      	cbnz	r3, 8001e68 <__sflush_r+0x7c>
 8001e66:	6560      	str	r0, [r4, #84]	; 0x54
 8001e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e6a:	602f      	str	r7, [r5, #0]
 8001e6c:	2900      	cmp	r1, #0
 8001e6e:	d0ca      	beq.n	8001e06 <__sflush_r+0x1a>
 8001e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e74:	4299      	cmp	r1, r3
 8001e76:	d002      	beq.n	8001e7e <__sflush_r+0x92>
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f000 f99d 	bl	80021b8 <_free_r>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	6360      	str	r0, [r4, #52]	; 0x34
 8001e82:	e7c1      	b.n	8001e08 <__sflush_r+0x1c>
 8001e84:	6a21      	ldr	r1, [r4, #32]
 8001e86:	2301      	movs	r3, #1
 8001e88:	4628      	mov	r0, r5
 8001e8a:	47b0      	blx	r6
 8001e8c:	1c41      	adds	r1, r0, #1
 8001e8e:	d1c7      	bne.n	8001e20 <__sflush_r+0x34>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0c4      	beq.n	8001e20 <__sflush_r+0x34>
 8001e96:	2b1d      	cmp	r3, #29
 8001e98:	d001      	beq.n	8001e9e <__sflush_r+0xb2>
 8001e9a:	2b16      	cmp	r3, #22
 8001e9c:	d101      	bne.n	8001ea2 <__sflush_r+0xb6>
 8001e9e:	602f      	str	r7, [r5, #0]
 8001ea0:	e7b1      	b.n	8001e06 <__sflush_r+0x1a>
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea8:	81a3      	strh	r3, [r4, #12]
 8001eaa:	e7ad      	b.n	8001e08 <__sflush_r+0x1c>
 8001eac:	690f      	ldr	r7, [r1, #16]
 8001eae:	2f00      	cmp	r7, #0
 8001eb0:	d0a9      	beq.n	8001e06 <__sflush_r+0x1a>
 8001eb2:	0793      	lsls	r3, r2, #30
 8001eb4:	bf18      	it	ne
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	680e      	ldr	r6, [r1, #0]
 8001eba:	bf08      	it	eq
 8001ebc:	694b      	ldreq	r3, [r1, #20]
 8001ebe:	eba6 0807 	sub.w	r8, r6, r7
 8001ec2:	600f      	str	r7, [r1, #0]
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	f1b8 0f00 	cmp.w	r8, #0
 8001eca:	dd9c      	ble.n	8001e06 <__sflush_r+0x1a>
 8001ecc:	4643      	mov	r3, r8
 8001ece:	463a      	mov	r2, r7
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	6a21      	ldr	r1, [r4, #32]
 8001ed4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ed6:	47b0      	blx	r6
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	dc06      	bgt.n	8001eea <__sflush_r+0xfe>
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee6:	81a3      	strh	r3, [r4, #12]
 8001ee8:	e78e      	b.n	8001e08 <__sflush_r+0x1c>
 8001eea:	4407      	add	r7, r0
 8001eec:	eba8 0800 	sub.w	r8, r8, r0
 8001ef0:	e7e9      	b.n	8001ec6 <__sflush_r+0xda>
 8001ef2:	bf00      	nop
 8001ef4:	20400001 	.word	0x20400001

08001ef8 <_fflush_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	690b      	ldr	r3, [r1, #16]
 8001efc:	4605      	mov	r5, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	b913      	cbnz	r3, 8001f08 <_fflush_r+0x10>
 8001f02:	2500      	movs	r5, #0
 8001f04:	4628      	mov	r0, r5
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	b118      	cbz	r0, 8001f12 <_fflush_r+0x1a>
 8001f0a:	6983      	ldr	r3, [r0, #24]
 8001f0c:	b90b      	cbnz	r3, 8001f12 <_fflush_r+0x1a>
 8001f0e:	f000 f887 	bl	8002020 <__sinit>
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <_fflush_r+0x6c>)
 8001f14:	429c      	cmp	r4, r3
 8001f16:	d11b      	bne.n	8001f50 <_fflush_r+0x58>
 8001f18:	686c      	ldr	r4, [r5, #4]
 8001f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ef      	beq.n	8001f02 <_fflush_r+0xa>
 8001f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f24:	07d0      	lsls	r0, r2, #31
 8001f26:	d404      	bmi.n	8001f32 <_fflush_r+0x3a>
 8001f28:	0599      	lsls	r1, r3, #22
 8001f2a:	d402      	bmi.n	8001f32 <_fflush_r+0x3a>
 8001f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f2e:	f000 f915 	bl	800215c <__retarget_lock_acquire_recursive>
 8001f32:	4628      	mov	r0, r5
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7ff ff59 	bl	8001dec <__sflush_r>
 8001f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	07da      	lsls	r2, r3, #31
 8001f40:	d4e0      	bmi.n	8001f04 <_fflush_r+0xc>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	059b      	lsls	r3, r3, #22
 8001f46:	d4dd      	bmi.n	8001f04 <_fflush_r+0xc>
 8001f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f4a:	f000 f908 	bl	800215e <__retarget_lock_release_recursive>
 8001f4e:	e7d9      	b.n	8001f04 <_fflush_r+0xc>
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <_fflush_r+0x70>)
 8001f52:	429c      	cmp	r4, r3
 8001f54:	d101      	bne.n	8001f5a <_fflush_r+0x62>
 8001f56:	68ac      	ldr	r4, [r5, #8]
 8001f58:	e7df      	b.n	8001f1a <_fflush_r+0x22>
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <_fflush_r+0x74>)
 8001f5c:	429c      	cmp	r4, r3
 8001f5e:	bf08      	it	eq
 8001f60:	68ec      	ldreq	r4, [r5, #12]
 8001f62:	e7da      	b.n	8001f1a <_fflush_r+0x22>
 8001f64:	080024d8 	.word	0x080024d8
 8001f68:	080024f8 	.word	0x080024f8
 8001f6c:	080024b8 	.word	0x080024b8

08001f70 <std>:
 8001f70:	2300      	movs	r3, #0
 8001f72:	b510      	push	{r4, lr}
 8001f74:	4604      	mov	r4, r0
 8001f76:	e9c0 3300 	strd	r3, r3, [r0]
 8001f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f7e:	6083      	str	r3, [r0, #8]
 8001f80:	8181      	strh	r1, [r0, #12]
 8001f82:	6643      	str	r3, [r0, #100]	; 0x64
 8001f84:	81c2      	strh	r2, [r0, #14]
 8001f86:	6183      	str	r3, [r0, #24]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	305c      	adds	r0, #92	; 0x5c
 8001f8e:	f7ff fe5f 	bl	8001c50 <memset>
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <std+0x38>)
 8001f94:	6224      	str	r4, [r4, #32]
 8001f96:	6263      	str	r3, [r4, #36]	; 0x24
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <std+0x3c>)
 8001f9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <std+0x40>)
 8001f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <std+0x44>)
 8001fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08002325 	.word	0x08002325
 8001fac:	08002347 	.word	0x08002347
 8001fb0:	0800237f 	.word	0x0800237f
 8001fb4:	080023a3 	.word	0x080023a3

08001fb8 <_cleanup_r>:
 8001fb8:	4901      	ldr	r1, [pc, #4]	; (8001fc0 <_cleanup_r+0x8>)
 8001fba:	f000 b8af 	b.w	800211c <_fwalk_reent>
 8001fbe:	bf00      	nop
 8001fc0:	08001ef9 	.word	0x08001ef9

08001fc4 <__sfmoreglue>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	2568      	movs	r5, #104	; 0x68
 8001fc8:	1e4a      	subs	r2, r1, #1
 8001fca:	4355      	muls	r5, r2
 8001fcc:	460e      	mov	r6, r1
 8001fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fd2:	f000 f93d 	bl	8002250 <_malloc_r>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	b140      	cbz	r0, 8001fec <__sfmoreglue+0x28>
 8001fda:	2100      	movs	r1, #0
 8001fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8001fe0:	300c      	adds	r0, #12
 8001fe2:	60a0      	str	r0, [r4, #8]
 8001fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fe8:	f7ff fe32 	bl	8001c50 <memset>
 8001fec:	4620      	mov	r0, r4
 8001fee:	bd70      	pop	{r4, r5, r6, pc}

08001ff0 <__sfp_lock_acquire>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__sfp_lock_acquire+0x8>)
 8001ff2:	f000 b8b3 	b.w	800215c <__retarget_lock_acquire_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	200000ec 	.word	0x200000ec

08001ffc <__sfp_lock_release>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__sfp_lock_release+0x8>)
 8001ffe:	f000 b8ae 	b.w	800215e <__retarget_lock_release_recursive>
 8002002:	bf00      	nop
 8002004:	200000ec 	.word	0x200000ec

08002008 <__sinit_lock_acquire>:
 8002008:	4801      	ldr	r0, [pc, #4]	; (8002010 <__sinit_lock_acquire+0x8>)
 800200a:	f000 b8a7 	b.w	800215c <__retarget_lock_acquire_recursive>
 800200e:	bf00      	nop
 8002010:	200000e7 	.word	0x200000e7

08002014 <__sinit_lock_release>:
 8002014:	4801      	ldr	r0, [pc, #4]	; (800201c <__sinit_lock_release+0x8>)
 8002016:	f000 b8a2 	b.w	800215e <__retarget_lock_release_recursive>
 800201a:	bf00      	nop
 800201c:	200000e7 	.word	0x200000e7

08002020 <__sinit>:
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
 8002024:	f7ff fff0 	bl	8002008 <__sinit_lock_acquire>
 8002028:	69a3      	ldr	r3, [r4, #24]
 800202a:	b11b      	cbz	r3, 8002034 <__sinit+0x14>
 800202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002030:	f7ff bff0 	b.w	8002014 <__sinit_lock_release>
 8002034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002038:	6523      	str	r3, [r4, #80]	; 0x50
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <__sinit+0x68>)
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <__sinit+0x6c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	62a2      	str	r2, [r4, #40]	; 0x28
 8002042:	42a3      	cmp	r3, r4
 8002044:	bf08      	it	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	4620      	mov	r0, r4
 800204a:	bf08      	it	eq
 800204c:	61a3      	streq	r3, [r4, #24]
 800204e:	f000 f81f 	bl	8002090 <__sfp>
 8002052:	6060      	str	r0, [r4, #4]
 8002054:	4620      	mov	r0, r4
 8002056:	f000 f81b 	bl	8002090 <__sfp>
 800205a:	60a0      	str	r0, [r4, #8]
 800205c:	4620      	mov	r0, r4
 800205e:	f000 f817 	bl	8002090 <__sfp>
 8002062:	2200      	movs	r2, #0
 8002064:	2104      	movs	r1, #4
 8002066:	60e0      	str	r0, [r4, #12]
 8002068:	6860      	ldr	r0, [r4, #4]
 800206a:	f7ff ff81 	bl	8001f70 <std>
 800206e:	2201      	movs	r2, #1
 8002070:	2109      	movs	r1, #9
 8002072:	68a0      	ldr	r0, [r4, #8]
 8002074:	f7ff ff7c 	bl	8001f70 <std>
 8002078:	2202      	movs	r2, #2
 800207a:	2112      	movs	r1, #18
 800207c:	68e0      	ldr	r0, [r4, #12]
 800207e:	f7ff ff77 	bl	8001f70 <std>
 8002082:	2301      	movs	r3, #1
 8002084:	61a3      	str	r3, [r4, #24]
 8002086:	e7d1      	b.n	800202c <__sinit+0xc>
 8002088:	080024b4 	.word	0x080024b4
 800208c:	08001fb9 	.word	0x08001fb9

08002090 <__sfp>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	4607      	mov	r7, r0
 8002094:	f7ff ffac 	bl	8001ff0 <__sfp_lock_acquire>
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <__sfp+0x84>)
 800209a:	681e      	ldr	r6, [r3, #0]
 800209c:	69b3      	ldr	r3, [r6, #24]
 800209e:	b913      	cbnz	r3, 80020a6 <__sfp+0x16>
 80020a0:	4630      	mov	r0, r6
 80020a2:	f7ff ffbd 	bl	8002020 <__sinit>
 80020a6:	3648      	adds	r6, #72	; 0x48
 80020a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	d503      	bpl.n	80020b8 <__sfp+0x28>
 80020b0:	6833      	ldr	r3, [r6, #0]
 80020b2:	b30b      	cbz	r3, 80020f8 <__sfp+0x68>
 80020b4:	6836      	ldr	r6, [r6, #0]
 80020b6:	e7f7      	b.n	80020a8 <__sfp+0x18>
 80020b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020bc:	b9d5      	cbnz	r5, 80020f4 <__sfp+0x64>
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <__sfp+0x88>)
 80020c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020c4:	60e3      	str	r3, [r4, #12]
 80020c6:	6665      	str	r5, [r4, #100]	; 0x64
 80020c8:	f000 f847 	bl	800215a <__retarget_lock_init_recursive>
 80020cc:	f7ff ff96 	bl	8001ffc <__sfp_lock_release>
 80020d0:	2208      	movs	r2, #8
 80020d2:	4629      	mov	r1, r5
 80020d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020dc:	6025      	str	r5, [r4, #0]
 80020de:	61a5      	str	r5, [r4, #24]
 80020e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020e4:	f7ff fdb4 	bl	8001c50 <memset>
 80020e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020f0:	4620      	mov	r0, r4
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f4:	3468      	adds	r4, #104	; 0x68
 80020f6:	e7d9      	b.n	80020ac <__sfp+0x1c>
 80020f8:	2104      	movs	r1, #4
 80020fa:	4638      	mov	r0, r7
 80020fc:	f7ff ff62 	bl	8001fc4 <__sfmoreglue>
 8002100:	4604      	mov	r4, r0
 8002102:	6030      	str	r0, [r6, #0]
 8002104:	2800      	cmp	r0, #0
 8002106:	d1d5      	bne.n	80020b4 <__sfp+0x24>
 8002108:	f7ff ff78 	bl	8001ffc <__sfp_lock_release>
 800210c:	230c      	movs	r3, #12
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	e7ee      	b.n	80020f0 <__sfp+0x60>
 8002112:	bf00      	nop
 8002114:	080024b4 	.word	0x080024b4
 8002118:	ffff0001 	.word	0xffff0001

0800211c <_fwalk_reent>:
 800211c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002120:	4606      	mov	r6, r0
 8002122:	4688      	mov	r8, r1
 8002124:	2700      	movs	r7, #0
 8002126:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800212a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800212e:	f1b9 0901 	subs.w	r9, r9, #1
 8002132:	d505      	bpl.n	8002140 <_fwalk_reent+0x24>
 8002134:	6824      	ldr	r4, [r4, #0]
 8002136:	2c00      	cmp	r4, #0
 8002138:	d1f7      	bne.n	800212a <_fwalk_reent+0xe>
 800213a:	4638      	mov	r0, r7
 800213c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002140:	89ab      	ldrh	r3, [r5, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d907      	bls.n	8002156 <_fwalk_reent+0x3a>
 8002146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	d003      	beq.n	8002156 <_fwalk_reent+0x3a>
 800214e:	4629      	mov	r1, r5
 8002150:	4630      	mov	r0, r6
 8002152:	47c0      	blx	r8
 8002154:	4307      	orrs	r7, r0
 8002156:	3568      	adds	r5, #104	; 0x68
 8002158:	e7e9      	b.n	800212e <_fwalk_reent+0x12>

0800215a <__retarget_lock_init_recursive>:
 800215a:	4770      	bx	lr

0800215c <__retarget_lock_acquire_recursive>:
 800215c:	4770      	bx	lr

0800215e <__retarget_lock_release_recursive>:
 800215e:	4770      	bx	lr

08002160 <__swhatbuf_r>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	460e      	mov	r6, r1
 8002164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002168:	4614      	mov	r4, r2
 800216a:	2900      	cmp	r1, #0
 800216c:	461d      	mov	r5, r3
 800216e:	b096      	sub	sp, #88	; 0x58
 8002170:	da07      	bge.n	8002182 <__swhatbuf_r+0x22>
 8002172:	2300      	movs	r3, #0
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	89b3      	ldrh	r3, [r6, #12]
 8002178:	061a      	lsls	r2, r3, #24
 800217a:	d410      	bmi.n	800219e <__swhatbuf_r+0x3e>
 800217c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002180:	e00e      	b.n	80021a0 <__swhatbuf_r+0x40>
 8002182:	466a      	mov	r2, sp
 8002184:	f000 f934 	bl	80023f0 <_fstat_r>
 8002188:	2800      	cmp	r0, #0
 800218a:	dbf2      	blt.n	8002172 <__swhatbuf_r+0x12>
 800218c:	9a01      	ldr	r2, [sp, #4]
 800218e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002196:	425a      	negs	r2, r3
 8002198:	415a      	adcs	r2, r3
 800219a:	602a      	str	r2, [r5, #0]
 800219c:	e7ee      	b.n	800217c <__swhatbuf_r+0x1c>
 800219e:	2340      	movs	r3, #64	; 0x40
 80021a0:	2000      	movs	r0, #0
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	b016      	add	sp, #88	; 0x58
 80021a6:	bd70      	pop	{r4, r5, r6, pc}

080021a8 <malloc>:
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <malloc+0xc>)
 80021aa:	4601      	mov	r1, r0
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f000 b84f 	b.w	8002250 <_malloc_r>
 80021b2:	bf00      	nop
 80021b4:	2000000c 	.word	0x2000000c

080021b8 <_free_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4605      	mov	r5, r0
 80021bc:	2900      	cmp	r1, #0
 80021be:	d043      	beq.n	8002248 <_free_r+0x90>
 80021c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021c4:	1f0c      	subs	r4, r1, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bfb8      	it	lt
 80021ca:	18e4      	addlt	r4, r4, r3
 80021cc:	f000 f934 	bl	8002438 <__malloc_lock>
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <_free_r+0x94>)
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	4610      	mov	r0, r2
 80021d6:	b933      	cbnz	r3, 80021e6 <_free_r+0x2e>
 80021d8:	6063      	str	r3, [r4, #4]
 80021da:	6014      	str	r4, [r2, #0]
 80021dc:	4628      	mov	r0, r5
 80021de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021e2:	f000 b92f 	b.w	8002444 <__malloc_unlock>
 80021e6:	42a3      	cmp	r3, r4
 80021e8:	d90a      	bls.n	8002200 <_free_r+0x48>
 80021ea:	6821      	ldr	r1, [r4, #0]
 80021ec:	1862      	adds	r2, r4, r1
 80021ee:	4293      	cmp	r3, r2
 80021f0:	bf01      	itttt	eq
 80021f2:	681a      	ldreq	r2, [r3, #0]
 80021f4:	685b      	ldreq	r3, [r3, #4]
 80021f6:	1852      	addeq	r2, r2, r1
 80021f8:	6022      	streq	r2, [r4, #0]
 80021fa:	6063      	str	r3, [r4, #4]
 80021fc:	6004      	str	r4, [r0, #0]
 80021fe:	e7ed      	b.n	80021dc <_free_r+0x24>
 8002200:	461a      	mov	r2, r3
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	b10b      	cbz	r3, 800220a <_free_r+0x52>
 8002206:	42a3      	cmp	r3, r4
 8002208:	d9fa      	bls.n	8002200 <_free_r+0x48>
 800220a:	6811      	ldr	r1, [r2, #0]
 800220c:	1850      	adds	r0, r2, r1
 800220e:	42a0      	cmp	r0, r4
 8002210:	d10b      	bne.n	800222a <_free_r+0x72>
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	4401      	add	r1, r0
 8002216:	1850      	adds	r0, r2, r1
 8002218:	4283      	cmp	r3, r0
 800221a:	6011      	str	r1, [r2, #0]
 800221c:	d1de      	bne.n	80021dc <_free_r+0x24>
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4401      	add	r1, r0
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	6053      	str	r3, [r2, #4]
 8002228:	e7d8      	b.n	80021dc <_free_r+0x24>
 800222a:	d902      	bls.n	8002232 <_free_r+0x7a>
 800222c:	230c      	movs	r3, #12
 800222e:	602b      	str	r3, [r5, #0]
 8002230:	e7d4      	b.n	80021dc <_free_r+0x24>
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	1821      	adds	r1, r4, r0
 8002236:	428b      	cmp	r3, r1
 8002238:	bf01      	itttt	eq
 800223a:	6819      	ldreq	r1, [r3, #0]
 800223c:	685b      	ldreq	r3, [r3, #4]
 800223e:	1809      	addeq	r1, r1, r0
 8002240:	6021      	streq	r1, [r4, #0]
 8002242:	6063      	str	r3, [r4, #4]
 8002244:	6054      	str	r4, [r2, #4]
 8002246:	e7c9      	b.n	80021dc <_free_r+0x24>
 8002248:	bd38      	pop	{r3, r4, r5, pc}
 800224a:	bf00      	nop
 800224c:	20000090 	.word	0x20000090

08002250 <_malloc_r>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	1ccd      	adds	r5, r1, #3
 8002254:	f025 0503 	bic.w	r5, r5, #3
 8002258:	3508      	adds	r5, #8
 800225a:	2d0c      	cmp	r5, #12
 800225c:	bf38      	it	cc
 800225e:	250c      	movcc	r5, #12
 8002260:	2d00      	cmp	r5, #0
 8002262:	4606      	mov	r6, r0
 8002264:	db01      	blt.n	800226a <_malloc_r+0x1a>
 8002266:	42a9      	cmp	r1, r5
 8002268:	d903      	bls.n	8002272 <_malloc_r+0x22>
 800226a:	230c      	movs	r3, #12
 800226c:	6033      	str	r3, [r6, #0]
 800226e:	2000      	movs	r0, #0
 8002270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002272:	f000 f8e1 	bl	8002438 <__malloc_lock>
 8002276:	4921      	ldr	r1, [pc, #132]	; (80022fc <_malloc_r+0xac>)
 8002278:	680a      	ldr	r2, [r1, #0]
 800227a:	4614      	mov	r4, r2
 800227c:	b99c      	cbnz	r4, 80022a6 <_malloc_r+0x56>
 800227e:	4f20      	ldr	r7, [pc, #128]	; (8002300 <_malloc_r+0xb0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b923      	cbnz	r3, 800228e <_malloc_r+0x3e>
 8002284:	4621      	mov	r1, r4
 8002286:	4630      	mov	r0, r6
 8002288:	f000 f83c 	bl	8002304 <_sbrk_r>
 800228c:	6038      	str	r0, [r7, #0]
 800228e:	4629      	mov	r1, r5
 8002290:	4630      	mov	r0, r6
 8002292:	f000 f837 	bl	8002304 <_sbrk_r>
 8002296:	1c43      	adds	r3, r0, #1
 8002298:	d123      	bne.n	80022e2 <_malloc_r+0x92>
 800229a:	230c      	movs	r3, #12
 800229c:	4630      	mov	r0, r6
 800229e:	6033      	str	r3, [r6, #0]
 80022a0:	f000 f8d0 	bl	8002444 <__malloc_unlock>
 80022a4:	e7e3      	b.n	800226e <_malloc_r+0x1e>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	1b5b      	subs	r3, r3, r5
 80022aa:	d417      	bmi.n	80022dc <_malloc_r+0x8c>
 80022ac:	2b0b      	cmp	r3, #11
 80022ae:	d903      	bls.n	80022b8 <_malloc_r+0x68>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	441c      	add	r4, r3
 80022b4:	6025      	str	r5, [r4, #0]
 80022b6:	e004      	b.n	80022c2 <_malloc_r+0x72>
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	42a2      	cmp	r2, r4
 80022bc:	bf0c      	ite	eq
 80022be:	600b      	streq	r3, [r1, #0]
 80022c0:	6053      	strne	r3, [r2, #4]
 80022c2:	4630      	mov	r0, r6
 80022c4:	f000 f8be 	bl	8002444 <__malloc_unlock>
 80022c8:	f104 000b 	add.w	r0, r4, #11
 80022cc:	1d23      	adds	r3, r4, #4
 80022ce:	f020 0007 	bic.w	r0, r0, #7
 80022d2:	1ac2      	subs	r2, r0, r3
 80022d4:	d0cc      	beq.n	8002270 <_malloc_r+0x20>
 80022d6:	1a1b      	subs	r3, r3, r0
 80022d8:	50a3      	str	r3, [r4, r2]
 80022da:	e7c9      	b.n	8002270 <_malloc_r+0x20>
 80022dc:	4622      	mov	r2, r4
 80022de:	6864      	ldr	r4, [r4, #4]
 80022e0:	e7cc      	b.n	800227c <_malloc_r+0x2c>
 80022e2:	1cc4      	adds	r4, r0, #3
 80022e4:	f024 0403 	bic.w	r4, r4, #3
 80022e8:	42a0      	cmp	r0, r4
 80022ea:	d0e3      	beq.n	80022b4 <_malloc_r+0x64>
 80022ec:	1a21      	subs	r1, r4, r0
 80022ee:	4630      	mov	r0, r6
 80022f0:	f000 f808 	bl	8002304 <_sbrk_r>
 80022f4:	3001      	adds	r0, #1
 80022f6:	d1dd      	bne.n	80022b4 <_malloc_r+0x64>
 80022f8:	e7cf      	b.n	800229a <_malloc_r+0x4a>
 80022fa:	bf00      	nop
 80022fc:	20000090 	.word	0x20000090
 8002300:	20000094 	.word	0x20000094

08002304 <_sbrk_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	2300      	movs	r3, #0
 8002308:	4d05      	ldr	r5, [pc, #20]	; (8002320 <_sbrk_r+0x1c>)
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	f7fe fa58 	bl	80007c4 <_sbrk>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_sbrk_r+0x1a>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_sbrk_r+0x1a>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	200000f0 	.word	0x200000f0

08002324 <__sread>:
 8002324:	b510      	push	{r4, lr}
 8002326:	460c      	mov	r4, r1
 8002328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800232c:	f000 f890 	bl	8002450 <_read_r>
 8002330:	2800      	cmp	r0, #0
 8002332:	bfab      	itete	ge
 8002334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002336:	89a3      	ldrhlt	r3, [r4, #12]
 8002338:	181b      	addge	r3, r3, r0
 800233a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800233e:	bfac      	ite	ge
 8002340:	6563      	strge	r3, [r4, #84]	; 0x54
 8002342:	81a3      	strhlt	r3, [r4, #12]
 8002344:	bd10      	pop	{r4, pc}

08002346 <__swrite>:
 8002346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234a:	461f      	mov	r7, r3
 800234c:	898b      	ldrh	r3, [r1, #12]
 800234e:	4605      	mov	r5, r0
 8002350:	05db      	lsls	r3, r3, #23
 8002352:	460c      	mov	r4, r1
 8002354:	4616      	mov	r6, r2
 8002356:	d505      	bpl.n	8002364 <__swrite+0x1e>
 8002358:	2302      	movs	r3, #2
 800235a:	2200      	movs	r2, #0
 800235c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002360:	f000 f858 	bl	8002414 <_lseek_r>
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	4632      	mov	r2, r6
 8002368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	4628      	mov	r0, r5
 8002370:	463b      	mov	r3, r7
 8002372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800237a:	f000 b817 	b.w	80023ac <_write_r>

0800237e <__sseek>:
 800237e:	b510      	push	{r4, lr}
 8002380:	460c      	mov	r4, r1
 8002382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002386:	f000 f845 	bl	8002414 <_lseek_r>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	bf15      	itete	ne
 8002390:	6560      	strne	r0, [r4, #84]	; 0x54
 8002392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800239a:	81a3      	strheq	r3, [r4, #12]
 800239c:	bf18      	it	ne
 800239e:	81a3      	strhne	r3, [r4, #12]
 80023a0:	bd10      	pop	{r4, pc}

080023a2 <__sclose>:
 80023a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a6:	f000 b813 	b.w	80023d0 <_close_r>
	...

080023ac <_write_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	4d05      	ldr	r5, [pc, #20]	; (80023cc <_write_r+0x20>)
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe f8ca 	bl	8000554 <_write>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_write_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_write_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200000f0 	.word	0x200000f0

080023d0 <_close_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	2300      	movs	r3, #0
 80023d4:	4d05      	ldr	r5, [pc, #20]	; (80023ec <_close_r+0x1c>)
 80023d6:	4604      	mov	r4, r0
 80023d8:	4608      	mov	r0, r1
 80023da:	602b      	str	r3, [r5, #0]
 80023dc:	f7fe f8e6 	bl	80005ac <_close>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	d102      	bne.n	80023ea <_close_r+0x1a>
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	b103      	cbz	r3, 80023ea <_close_r+0x1a>
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	200000f0 	.word	0x200000f0

080023f0 <_fstat_r>:
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	2300      	movs	r3, #0
 80023f4:	4d06      	ldr	r5, [pc, #24]	; (8002410 <_fstat_r+0x20>)
 80023f6:	4604      	mov	r4, r0
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	602b      	str	r3, [r5, #0]
 80023fe:	f7fe f925 	bl	800064c <_fstat>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	d102      	bne.n	800240c <_fstat_r+0x1c>
 8002406:	682b      	ldr	r3, [r5, #0]
 8002408:	b103      	cbz	r3, 800240c <_fstat_r+0x1c>
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	bd38      	pop	{r3, r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	200000f0 	.word	0x200000f0

08002414 <_lseek_r>:
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	4604      	mov	r4, r0
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	2200      	movs	r2, #0
 800241e:	4d05      	ldr	r5, [pc, #20]	; (8002434 <_lseek_r+0x20>)
 8002420:	602a      	str	r2, [r5, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f7fe f8d9 	bl	80005da <_lseek>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d102      	bne.n	8002432 <_lseek_r+0x1e>
 800242c:	682b      	ldr	r3, [r5, #0]
 800242e:	b103      	cbz	r3, 8002432 <_lseek_r+0x1e>
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	200000f0 	.word	0x200000f0

08002438 <__malloc_lock>:
 8002438:	4801      	ldr	r0, [pc, #4]	; (8002440 <__malloc_lock+0x8>)
 800243a:	f7ff be8f 	b.w	800215c <__retarget_lock_acquire_recursive>
 800243e:	bf00      	nop
 8002440:	200000e8 	.word	0x200000e8

08002444 <__malloc_unlock>:
 8002444:	4801      	ldr	r0, [pc, #4]	; (800244c <__malloc_unlock+0x8>)
 8002446:	f7ff be8a 	b.w	800215e <__retarget_lock_release_recursive>
 800244a:	bf00      	nop
 800244c:	200000e8 	.word	0x200000e8

08002450 <_read_r>:
 8002450:	b538      	push	{r3, r4, r5, lr}
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	2200      	movs	r2, #0
 800245a:	4d05      	ldr	r5, [pc, #20]	; (8002470 <_read_r+0x20>)
 800245c:	602a      	str	r2, [r5, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	f7fe f8cc 	bl	80005fc <_read>
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	d102      	bne.n	800246e <_read_r+0x1e>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	b103      	cbz	r3, 800246e <_read_r+0x1e>
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	bd38      	pop	{r3, r4, r5, pc}
 8002470:	200000f0 	.word	0x200000f0

08002474 <_init>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr

08002480 <_fini>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	bf00      	nop
 8002484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002486:	bc08      	pop	{r3}
 8002488:	469e      	mov	lr, r3
 800248a:	4770      	bx	lr
