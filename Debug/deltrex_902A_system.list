
deltrex_902A_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a0  080026a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002718  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002718  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b33  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168e  00000000  00000000  00027bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  000298f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db9  00000000  00000000  00029f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070bd  00000000  00000000  00041ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f1b  00000000  00000000  00048d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cccb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef0  00000000  00000000  000ccd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080025fc 	.word	0x080025fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080025fc 	.word	0x080025fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc5d 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f835 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f89f 	bl	800029c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f873 	bl	8000248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	RetargetInit(&huart2);
 8000162:	4817      	ldr	r0, [pc, #92]	; (80001c0 <main+0x74>)
 8000164:	f000 faa2 	bl	80006ac <RetargetInit>
	bool door_1_unlocked = true;
 8000168:	2301      	movs	r3, #1
 800016a:	71fb      	strb	r3, [r7, #7]
	bool door_2_unlocked = true;
 800016c:	2301      	movs	r3, #1
 800016e:	71bb      	strb	r3, [r7, #6]
	bool waiting_on_ptl_release = false;
 8000170:	2300      	movs	r3, #0
 8000172:	717b      	strb	r3, [r7, #5]
	bool waiting_on_emergency_release = false;
 8000174:	2300      	movs	r3, #0
 8000176:	713b      	strb	r3, [r7, #4]
	bool waiting_on_door_close = false;
 8000178:	2300      	movs	r3, #0
 800017a:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	is_pushed_to_lock_pressed(&door_1_unlocked, &door_2_unlocked, &waiting_on_ptl_release, &waiting_on_door_close);
 800017c:	1cfb      	adds	r3, r7, #3
 800017e:	1d7a      	adds	r2, r7, #5
 8000180:	1db9      	adds	r1, r7, #6
 8000182:	1df8      	adds	r0, r7, #7
 8000184:	f000 f944 	bl	8000410 <is_pushed_to_lock_pressed>
  	is_emergency_pressed(&door_1_unlocked, &door_2_unlocked, &waiting_on_emergency_release);
 8000188:	1d3a      	adds	r2, r7, #4
 800018a:	1db9      	adds	r1, r7, #6
 800018c:	1dfb      	adds	r3, r7, #7
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f97a 	bl	8000488 <is_emergency_pressed>
  	check_door_1_status(&door_1_unlocked, &door_2_unlocked, &waiting_on_door_close);
 8000194:	1cfa      	adds	r2, r7, #3
 8000196:	1db9      	adds	r1, r7, #6
 8000198:	1dfb      	adds	r3, r7, #7
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f9a8 	bl	80004f0 <check_door_1_status>
		update_door_1_leds(&door_1_unlocked);
 80001a0:	1dfb      	adds	r3, r7, #7
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f9e8 	bl	8000578 <update_door_1_leds>
		check_door_2_status(&door_1_unlocked, &door_2_unlocked, &waiting_on_door_close);
 80001a8:	1cfa      	adds	r2, r7, #3
 80001aa:	1db9      	adds	r1, r7, #6
 80001ac:	1dfb      	adds	r3, r7, #7
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fa0e 	bl	80005d0 <check_door_2_status>
		update_door_2_leds(&door_2_unlocked);
 80001b4:	1dbb      	adds	r3, r7, #6
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fa4a 	bl	8000650 <update_door_2_leds>
  	is_pushed_to_lock_pressed(&door_1_unlocked, &door_2_unlocked, &waiting_on_ptl_release, &waiting_on_door_close);
 80001bc:	e7de      	b.n	800017c <main+0x30>
 80001be:	bf00      	nop
 80001c0:	20000098 	.word	0x20000098

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fe00 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f6:	2300      	movs	r3, #0
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 ff49 	bl	800109c <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000210:	f000 fa46 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 f9b4 	bl	800159c <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023a:	f000 fa31 	bl	80006a0 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MX_USART2_UART_Init+0x50>)
 8000250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800026e:	220c      	movs	r2, #12
 8000270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000280:	f001 fb26 	bl	80018d0 <HAL_UART_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800028a:	f000 fa09 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000098 	.word	0x20000098
 8000298:	40004400 	.word	0x40004400

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a50      	ldr	r2, [pc, #320]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c8:	4b4b      	ldr	r3, [pc, #300]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a4a      	ldr	r2, [pc, #296]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b45      	ldr	r3, [pc, #276]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a44      	ldr	r2, [pc, #272]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a3e      	ldr	r2, [pc, #248]	; (80003f8 <MX_GPIO_Init+0x15c>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <MX_GPIO_Init+0x15c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f641 0105 	movw	r1, #6149	; 0x1805
 8000316:	4839      	ldr	r0, [pc, #228]	; (80003fc <MX_GPIO_Init+0x160>)
 8000318:	f000 fe85 	bl	8001026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	4837      	ldr	r0, [pc, #220]	; (8000400 <MX_GPIO_Init+0x164>)
 8000322:	f000 fe80 	bl	8001026 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <MX_GPIO_Init+0x168>)
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4830      	ldr	r0, [pc, #192]	; (80003fc <MX_GPIO_Init+0x160>)
 800033c:	f000 fcd8 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12;
 8000340:	f641 0305 	movw	r3, #6149	; 0x1805
 8000344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	4828      	ldr	r0, [pc, #160]	; (80003fc <MX_GPIO_Init+0x160>)
 800035a:	f000 fcc9 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_10;
 800035e:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000368:	2301      	movs	r3, #1
 800036a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	4822      	ldr	r0, [pc, #136]	; (80003fc <MX_GPIO_Init+0x160>)
 8000374:	f000 fcbc 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_12;
 8000378:	f241 0352 	movw	r3, #4178	; 0x1052
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	481c      	ldr	r0, [pc, #112]	; (8000400 <MX_GPIO_Init+0x164>)
 800038e:	f000 fcaf 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000392:	2320      	movs	r3, #32
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	4815      	ldr	r0, [pc, #84]	; (8000400 <MX_GPIO_Init+0x164>)
 80003aa:	f000 fca1 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003ae:	2301      	movs	r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	4811      	ldr	r0, [pc, #68]	; (8000408 <MX_GPIO_Init+0x16c>)
 80003c2:	f000 fc95 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003c6:	2304      	movs	r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <MX_GPIO_Init+0x170>)
 80003da:	f000 fc89 	bl	8000cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f000 fc4d 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e8:	2028      	movs	r0, #40	; 0x28
 80003ea:	f000 fc66 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40011000 	.word	0x40011000
 8000400:	40010800 	.word	0x40010800
 8000404:	10110000 	.word	0x10110000
 8000408:	40010c00 	.word	0x40010c00
 800040c:	40011400 	.word	0x40011400

08000410 <is_pushed_to_lock_pressed>:

/* USER CODE BEGIN 4 */
void is_pushed_to_lock_pressed(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr, bool *waiting_on_ptl_release_ptr, bool *waiting_on_door_close_ptr)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	603b      	str	r3, [r7, #0]
	bool pressed_down = HAL_GPIO_ReadPin(PUSH_TO_LOCK.GPIOx, PUSH_TO_LOCK.GPIO_Pin) == 0;
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <is_pushed_to_lock_pressed+0x74>)
 8000420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000424:	4611      	mov	r1, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fde6 	bl	8000ff8 <HAL_GPIO_ReadPin>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf0c      	ite	eq
 8000432:	2301      	moveq	r3, #1
 8000434:	2300      	movne	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]

	if (!pressed_down && *waiting_on_ptl_release_ptr && !*waiting_on_door_close_ptr) {
 8000438:	7dfb      	ldrb	r3, [r7, #23]
 800043a:	f083 0301 	eor.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d014      	beq.n	800046e <is_pushed_to_lock_pressed+0x5e>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d010      	beq.n	800046e <is_pushed_to_lock_pressed+0x5e>
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f083 0301 	eor.w	r3, r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d009      	beq.n	800046e <is_pushed_to_lock_pressed+0x5e>
		*door_1_unlocked_ptr = false;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
		*door_2_unlocked_ptr = false;
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
		*waiting_on_ptl_release_ptr = false;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
	} else if (pressed_down) {
		*waiting_on_ptl_release_ptr = true;
	}
}
 800046c:	e005      	b.n	800047a <is_pushed_to_lock_pressed+0x6a>
	} else if (pressed_down) {
 800046e:	7dfb      	ldrb	r3, [r7, #23]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <is_pushed_to_lock_pressed+0x6a>
		*waiting_on_ptl_release_ptr = true;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010800 	.word	0x40010800

08000488 <is_emergency_pressed>:

void is_emergency_pressed(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr, bool *waiting_on_emergency_release_ptr)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
	bool pressed_down = HAL_GPIO_ReadPin(EMERGENCY.GPIOx, EMERGENCY.GPIO_Pin) == 0;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <is_emergency_pressed+0x64>)
 8000496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800049a:	4611      	mov	r1, r2
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fdab 	bl	8000ff8 <HAL_GPIO_ReadPin>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	75fb      	strb	r3, [r7, #23]

	if (!pressed_down && *waiting_on_emergency_release_ptr) {
 80004ae:	7dfb      	ldrb	r3, [r7, #23]
 80004b0:	f083 0301 	eor.w	r3, r3, #1
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00d      	beq.n	80004d6 <is_emergency_pressed+0x4e>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d009      	beq.n	80004d6 <is_emergency_pressed+0x4e>
		*door_1_unlocked_ptr = true;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
		*door_2_unlocked_ptr = true;
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
		*waiting_on_emergency_release_ptr = false;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
	} else if (pressed_down) {
		*waiting_on_emergency_release_ptr = true;
	}
}
 80004d4:	e005      	b.n	80004e2 <is_emergency_pressed+0x5a>
	} else if (pressed_down) {
 80004d6:	7dfb      	ldrb	r3, [r7, #23]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <is_emergency_pressed+0x5a>
		*waiting_on_emergency_release_ptr = true;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40011000 	.word	0x40011000

080004f0 <check_door_1_status>:

void check_door_1_status(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr, bool *waiting_on_door_close_ptr)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	bool opening_door_1_from_inside = HAL_GPIO_ReadPin(DOOR_1_INSIDE_SWITCH.GPIOx, DOOR_1_INSIDE_SWITCH.GPIO_Pin) == 0;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <check_door_1_status+0x80>)
 80004fe:	2204      	movs	r2, #4
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fd78 	bl	8000ff8 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	bf0c      	ite	eq
 800050e:	2301      	moveq	r3, #1
 8000510:	2300      	movne	r3, #0
 8000512:	75fb      	strb	r3, [r7, #23]

	/* Check if opening door 1 from inside */
	if (opening_door_1_from_inside) {
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <check_door_1_status+0x38>
		*door_1_unlocked_ptr = true;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
		*door_2_unlocked_ptr = true;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
		} else {
			*door_2_unlocked_ptr = true;
		}
	}

	return;
 8000526:	e01e      	b.n	8000566 <check_door_1_status+0x76>
	} else if (*door_1_unlocked_ptr) {
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d01a      	beq.n	8000566 <check_door_1_status+0x76>
		bool door_1_opened = HAL_GPIO_ReadPin(DOOR_1_OUTSIDE_SWITCH.GPIOx, DOOR_1_OUTSIDE_SWITCH.GPIO_Pin) == 0;
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <check_door_1_status+0x84>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fd5d 	bl	8000ff8 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	75bb      	strb	r3, [r7, #22]
		*waiting_on_door_close_ptr = door_1_opened;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7dba      	ldrb	r2, [r7, #22]
 800054e:	701a      	strb	r2, [r3, #0]
		if (door_1_opened) {
 8000550:	7dbb      	ldrb	r3, [r7, #22]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <check_door_1_status+0x6e>
			*door_2_unlocked_ptr = false;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
	return;
 800055c:	e003      	b.n	8000566 <check_door_1_status+0x76>
			*door_2_unlocked_ptr = true;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
	return;
 8000564:	bf00      	nop
 8000566:	bf00      	nop
}
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40011400 	.word	0x40011400
 8000574:	40011000 	.word	0x40011000

08000578 <update_door_1_leds>:

void update_door_1_leds(bool *door_1_unlocked_ptr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if (*door_1_unlocked_ptr) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00e      	beq.n	80005a6 <update_door_1_leds+0x2e>
		HAL_GPIO_WritePin(DOOR_1_RED_LED.GPIOx, DOOR_1_RED_LED.GPIO_Pin, 0);
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <update_door_1_leds+0x54>)
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	2200      	movs	r2, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fd48 	bl	8001026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DOOR_1_GREEN_LED.GPIOx, DOOR_1_GREEN_LED.GPIO_Pin, 1);
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <update_door_1_leds+0x54>)
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	2201      	movs	r2, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fd41 	bl	8001026 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(DOOR_1_RED_LED.GPIOx, DOOR_1_RED_LED.GPIO_Pin, 1);
		HAL_GPIO_WritePin(DOOR_1_GREEN_LED.GPIOx, DOOR_1_GREEN_LED.GPIO_Pin, 0);
	}
	return;
 80005a4:	e00e      	b.n	80005c4 <update_door_1_leds+0x4c>
		HAL_GPIO_WritePin(DOOR_1_RED_LED.GPIOx, DOOR_1_RED_LED.GPIO_Pin, 1);
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <update_door_1_leds+0x54>)
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	2201      	movs	r2, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fd39 	bl	8001026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DOOR_1_GREEN_LED.GPIOx, DOOR_1_GREEN_LED.GPIO_Pin, 0);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <update_door_1_leds+0x54>)
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	2200      	movs	r2, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fd32 	bl	8001026 <HAL_GPIO_WritePin>
	return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40011000 	.word	0x40011000

080005d0 <check_door_2_status>:

void check_door_2_status(bool *door_1_unlocked_ptr, bool *door_2_unlocked_ptr, bool *waiting_on_door_close_ptr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	bool opening_door_2_from_inside = HAL_GPIO_ReadPin(DOOR_2_INSIDE_SWITCH.GPIOx, DOOR_2_INSIDE_SWITCH.GPIO_Pin) == 0;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <check_door_2_status+0x7c>)
 80005de:	2202      	movs	r2, #2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd08 	bl	8000ff8 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	75fb      	strb	r3, [r7, #23]

	/* Check if opening door 1 from inside */
	if (opening_door_2_from_inside) {
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <check_door_2_status+0x38>
		*door_1_unlocked_ptr = true;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		*door_2_unlocked_ptr = true;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
			*door_1_unlocked_ptr = false;
		} else {
			*door_1_unlocked_ptr = true;
		}
	}
	return;
 8000606:	e01d      	b.n	8000644 <check_door_2_status+0x74>
	} else if (*door_2_unlocked_ptr) {
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d019      	beq.n	8000644 <check_door_2_status+0x74>
		bool door_2_opened = HAL_GPIO_ReadPin(DOOR_2_OUTSIDE_SWITCH.GPIOx, DOOR_2_OUTSIDE_SWITCH.GPIO_Pin) == 0;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <check_door_2_status+0x7c>)
 8000612:	2208      	movs	r2, #8
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fcee 	bl	8000ff8 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	bf0c      	ite	eq
 8000622:	2301      	moveq	r3, #1
 8000624:	2300      	movne	r3, #0
 8000626:	75bb      	strb	r3, [r7, #22]
		*waiting_on_door_close_ptr = door_2_opened;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7dba      	ldrb	r2, [r7, #22]
 800062c:	701a      	strb	r2, [r3, #0]
		if (door_2_opened) {
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <check_door_2_status+0x6c>
			*door_1_unlocked_ptr = false;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	return;
 800063a:	e003      	b.n	8000644 <check_door_2_status+0x74>
			*door_1_unlocked_ptr = true;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	return;
 8000642:	bf00      	nop
 8000644:	bf00      	nop
}
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40011000 	.word	0x40011000

08000650 <update_door_2_leds>:

void update_door_2_leds(bool *door_2_unlocked_ptr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (*door_2_unlocked_ptr) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00c      	beq.n	800067a <update_door_2_leds+0x2a>
		HAL_GPIO_WritePin(DOOR_2_RED_LED.GPIOx, DOOR_2_RED_LED.GPIO_Pin, 0);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <update_door_2_leds+0x4c>)
 8000662:	2104      	movs	r1, #4
 8000664:	2200      	movs	r2, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fcdd 	bl	8001026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DOOR_2_GREEN_LED.GPIOx, DOOR_2_GREEN_LED.GPIO_Pin, 1);
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <update_door_2_leds+0x4c>)
 800066e:	2101      	movs	r1, #1
 8000670:	2201      	movs	r2, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fcd7 	bl	8001026 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(DOOR_2_RED_LED.GPIOx, DOOR_2_RED_LED.GPIO_Pin, 1);
		HAL_GPIO_WritePin(DOOR_2_GREEN_LED.GPIOx, DOOR_2_GREEN_LED.GPIO_Pin, 0);
	}
	return;
 8000678:	e00c      	b.n	8000694 <update_door_2_leds+0x44>
		HAL_GPIO_WritePin(DOOR_2_RED_LED.GPIOx, DOOR_2_RED_LED.GPIO_Pin, 1);
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <update_door_2_leds+0x4c>)
 800067c:	2104      	movs	r1, #4
 800067e:	2201      	movs	r2, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fcd0 	bl	8001026 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DOOR_2_GREEN_LED.GPIOx, DOOR_2_GREEN_LED.GPIO_Pin, 0);
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <update_door_2_leds+0x4c>)
 8000688:	2101      	movs	r1, #1
 800068a:	2200      	movs	r2, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fcca 	bl	8001026 <HAL_GPIO_WritePin>
	return;
 8000692:	bf00      	nop
}
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40011000 	.word	0x40011000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <RetargetInit+0x28>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <RetargetInit+0x2c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6898      	ldr	r0, [r3, #8]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2202      	movs	r2, #2
 80006c4:	2100      	movs	r1, #0
 80006c6:	f001 fb8f 	bl	8001de8 <setvbuf>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000dc 	.word	0x200000dc
 80006d8:	2000000c 	.word	0x2000000c

080006dc <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d002      	beq.n	80006f4 <_write+0x18>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d111      	bne.n	8000718 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_write+0x54>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	f001 f932 	bl	800196a <HAL_UART_Transmit>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <_write+0x38>
      return len;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	e008      	b.n	8000726 <_write+0x4a>
    else
      return EIO;
 8000714:	2305      	movs	r3, #5
 8000716:	e006      	b.n	8000726 <_write+0x4a>
  }
  errno = EBADF;
 8000718:	f001 fb34 	bl	8001d84 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	2209      	movs	r2, #9
 8000720:	601a      	str	r2, [r3, #0]
  return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000dc 	.word	0x200000dc

08000734 <_close>:

int _close(int fd) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db04      	blt.n	800074c <_close+0x18>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b02      	cmp	r3, #2
 8000746:	dc01      	bgt.n	800074c <_close+0x18>
    return 0;
 8000748:	2300      	movs	r3, #0
 800074a:	e006      	b.n	800075a <_close+0x26>

  errno = EBADF;
 800074c:	f001 fb1a 	bl	8001d84 <__errno>
 8000750:	4603      	mov	r3, r0
 8000752:	2209      	movs	r2, #9
 8000754:	601a      	str	r2, [r3, #0]
  return -1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800076e:	f001 fb09 	bl	8001d84 <__errno>
 8000772:	4603      	mov	r3, r0
 8000774:	2209      	movs	r2, #9
 8000776:	601a      	str	r2, [r3, #0]
  return -1;
 8000778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <_read>:

int _read(int fd, char* ptr, int len) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d110      	bne.n	80007b8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <_read+0x4c>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800079e:	2201      	movs	r2, #1
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	f001 f974 	bl	8001a8e <HAL_UART_Receive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <_read+0x30>
      return 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e008      	b.n	80007c6 <_read+0x42>
    else
      return EIO;
 80007b4:	2305      	movs	r3, #5
 80007b6:	e006      	b.n	80007c6 <_read+0x42>
  }
  errno = EBADF;
 80007b8:	f001 fae4 	bl	8001d84 <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	2209      	movs	r2, #9
 80007c0:	601a      	str	r2, [r3, #0]
  return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db08      	blt.n	80007f6 <_fstat+0x22>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	dc05      	bgt.n	80007f6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f0:	605a      	str	r2, [r3, #4]
    return 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e005      	b.n	8000802 <_fstat+0x2e>
  }

  errno = EBADF;
 80007f6:	f001 fac5 	bl	8001d84 <__errno>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2209      	movs	r2, #9
 80007fe:	601a      	str	r2, [r3, #0]
  return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_MspInit+0x5c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x5c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x60>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_MspInit+0x60>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	40010000 	.word	0x40010000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x70>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d123      	bne.n	80008d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0x74>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_UART_MspInit+0x74>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x74>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_UART_MspInit+0x74>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c0:	230c      	movs	r3, #12
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0x78>)
 80008d4:	f000 fa0c 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f8b3 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800093e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000942:	f000 fb89 	bl	8001058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f001 fa02 	bl	8001d84 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20005000 	.word	0x20005000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	200000f8 	.word	0x200000f8

080009b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ea:	f7ff ffe5 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f001 f9cf 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fbab 	bl	800014c <main>
  bx lr
 80009f6:	4770      	bx	lr
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a00:	080026a8 	.word	0x080026a8
  ldr r2, =_sbss
 8000a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a08:	200000f4 	.word	0x200000f4

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x28>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f923 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff feee 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f93b 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 f903 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000e0 	.word	0x200000e0

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200000e0 	.word	0x200000e0

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4906      	ldr	r1, [pc, #24]	; (8000b6c <__NVIC_EnableIRQ+0x34>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff2d 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff42 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff35 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e169      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8158 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a9a      	ldr	r2, [pc, #616]	; (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d2c:	4a98      	ldr	r2, [pc, #608]	; (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d875      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d32:	4a98      	ldr	r2, [pc, #608]	; (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d058      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d38:	4a96      	ldr	r2, [pc, #600]	; (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d86f      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d3e:	4a96      	ldr	r2, [pc, #600]	; (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d052      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d869      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	; (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04c      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	; (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d863      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d046      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d85d      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d82a      	bhi.n	8000dbc <HAL_GPIO_Init+0xcc>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d859      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <HAL_GPIO_Init+0x80>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd7 	.word	0x08000dd7
 8000d7c:	08000e19 	.word	0x08000e19
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000e1f 	.word	0x08000e1f
 8000d8c:	08000e1f 	.word	0x08000e1f
 8000d90:	08000e1f 	.word	0x08000e1f
 8000d94:	08000e1f 	.word	0x08000e1f
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000de1 	.word	0x08000de1
 8000dbc:	4a79      	ldr	r2, [pc, #484]	; (8000fa4 <HAL_GPIO_Init+0x2b4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e029      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e024      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01f      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e01a      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e013      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e009      	b.n	8000e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e003      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          break;
 8000e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d801      	bhi.n	8000e2a <HAL_GPIO_Init+0x13a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_Init+0x13e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	; 0xff
 8000e34:	d802      	bhi.n	8000e3c <HAL_GPIO_Init+0x14c>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x152>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	3b08      	subs	r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	210f      	movs	r1, #15
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b1 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2bc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <HAL_GPIO_Init+0x2c0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d013      	beq.n	8000edc <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000edc:	2300      	movs	r3, #0
 8000ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eee:	492f      	ldr	r1, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x2bc>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	492c      	ldr	r1, [pc, #176]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	4922      	ldr	r1, [pc, #136]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	491e      	ldr	r1, [pc, #120]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	4918      	ldr	r1, [pc, #96]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d021      	beq.n	8000fc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
 8000f8c:	e021      	b.n	8000fd2 <HAL_GPIO_Init+0x2e2>
 8000f8e:	bf00      	nop
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10310000 	.word	0x10310000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	10210000 	.word	0x10210000
 8000fa0:	10120000 	.word	0x10120000
 8000fa4:	10110000 	.word	0x10110000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae8e 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	372c      	adds	r7, #44	; 0x2c
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
 8001032:	4613      	mov	r3, r2
 8001034:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001042:	e003      	b.n	800104c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	041a      	lsls	r2, r3, #16
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	611a      	str	r2, [r3, #16]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
	...

08001058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f806 	bl	8001088 <HAL_GPIO_EXTI_Callback>
  }
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e26c      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010bc:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d00c      	beq.n	80010e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c8:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d112      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
 80010d4:	4b8c      	ldr	r3, [pc, #560]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d10b      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d06c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x12c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d168      	bne.n	80011c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e246      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x76>
 8001104:	4b80      	ldr	r3, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e02e      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b78      	ldr	r3, [pc, #480]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0xbc>
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a71      	ldr	r2, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a67      	ldr	r2, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fca2 	bl	8000ac0 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fc9e 	bl	8000ac0 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1fa      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xe4>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc8e 	bl	8000ac0 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc8a 	bl	8000ac0 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1e6      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x10c>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1ba      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4939      	ldr	r1, [pc, #228]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fc43 	bl	8000ac0 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc3f 	bl	8000ac0 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e19b      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fc22 	bl	8000ac0 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc1e 	bl	8000ac0 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e17a      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d03a      	beq.n	8001320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d019      	beq.n	80012e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc02 	bl	8000ac0 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fbfe 	bl	8000ac0 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e15a      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fad8 	bl	8001894 <RCC_Delay>
 80012e4:	e01c      	b.n	8001320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fbe8 	bl	8000ac0 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f2:	e00f      	b.n	8001314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fbe4 	bl	8000ac0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d908      	bls.n	8001314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e140      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	42420000 	.word	0x42420000
 8001310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b9e      	ldr	r3, [pc, #632]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e9      	bne.n	80012f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a6 	beq.w	800147a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b94      	ldr	r3, [pc, #592]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a93      	ldr	r2, [pc, #588]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b91      	ldr	r3, [pc, #580]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a8a      	ldr	r2, [pc, #552]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fba5 	bl	8000ac0 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fba1 	bl	8000ac0 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0fd      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b81      	ldr	r3, [pc, #516]	; (8001594 <HAL_RCC_OscConfig+0x4f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x312>
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e02d      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b73      	ldr	r3, [pc, #460]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a72      	ldr	r2, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	e01c      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x356>
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a6c      	ldr	r2, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a69      	ldr	r2, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a66      	ldr	r2, [pc, #408]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a63      	ldr	r2, [pc, #396]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb55 	bl	8000ac0 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb51 	bl	8000ac0 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0ab      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <HAL_RCC_OscConfig+0x37e>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb3f 	bl	8000ac0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb3b 	bl	8000ac0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e095      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8081 	beq.w	8001586 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d061      	beq.n	8001554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d146      	bne.n	8001526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb0f 	bl	8000ac0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb0b 	bl	8000ac0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e067      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d108      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	492d      	ldr	r1, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a19      	ldr	r1, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	430b      	orrs	r3, r1
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fadf 	bl	8000ac0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fadb 	bl	8000ac0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e037      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x46a>
 8001524:	e02f      	b.n	8001586 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_RCC_OscConfig+0x4fc>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fac8 	bl	8000ac0 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fac4 	bl	8000ac0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e020      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x498>
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	429a      	cmp	r2, r3
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	40007000 	.word	0x40007000
 8001598:	42420060 	.word	0x42420060

0800159c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0d0      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d910      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4965      	ldr	r1, [pc, #404]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800161a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d040      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e073      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4936      	ldr	r1, [pc, #216]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa18 	bl	8000ac0 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa14 	bl	8000ac0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e053      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d210      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4922      	ldr	r1, [pc, #136]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1cc>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f976 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	08002624 	.word	0x08002624
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b490      	push	{r4, r7}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001778:	1d3c      	adds	r4, r7, #4
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001780:	f240 2301 	movw	r3, #513	; 0x201
 8001784:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x46>
 80017ae:	e02d      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b2:	623b      	str	r3, [r7, #32]
      break;
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017c2:	4413      	add	r3, r2
 80017c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c5b      	lsrs	r3, r3, #17
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017e2:	4413      	add	r3, r2
 80017e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	fb02 f203 	mul.w	r2, r2, r3
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e004      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	623b      	str	r3, [r7, #32]
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180e:	623b      	str	r3, [r7, #32]
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	6a3b      	ldr	r3, [r7, #32]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bc90      	pop	{r4, r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	08002614 	.word	0x08002614
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	08002634 	.word	0x08002634

0800186c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001870:	f7ff ffde 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0adb      	lsrs	r3, r3, #11
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4903      	ldr	r1, [pc, #12]	; (8001890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	08002634 	.word	0x08002634

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e03f      	b.n	8001962 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe ffba 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9a7 	bl	8001c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b08a      	sub	sp, #40	; 0x28
 800196e:	af02      	add	r7, sp, #8
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b20      	cmp	r3, #32
 8001988:	d17c      	bne.n	8001a84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <HAL_UART_Transmit+0x2c>
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e075      	b.n	8001a86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_UART_Transmit+0x3e>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e06e      	b.n	8001a86 <HAL_UART_Transmit+0x11c>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2221      	movs	r2, #33	; 0x21
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019be:	f7ff f87f 	bl	8000ac0 <HAL_GetTick>
 80019c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d8:	d108      	bne.n	80019ec <HAL_UART_Transmit+0x82>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d104      	bne.n	80019ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	e003      	b.n	80019f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80019fc:	e02a      	b.n	8001a54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f8e2 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e036      	b.n	8001a86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10b      	bne.n	8001a36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3302      	adds	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	e007      	b.n	8001a46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	3301      	adds	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1cf      	bne.n	80019fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f8b2 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e006      	b.n	8001a86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b08a      	sub	sp, #40	; 0x28
 8001a92:	af02      	add	r7, sp, #8
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	f040 808c 	bne.w	8001bc8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_UART_Receive+0x2e>
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e084      	b.n	8001bca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Receive+0x40>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e07d      	b.n	8001bca <HAL_UART_Receive+0x13c>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2222      	movs	r2, #34	; 0x22
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aea:	f7fe ffe9 	bl	8000ac0 <HAL_GetTick>
 8001aee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b04:	d108      	bne.n	8001b18 <HAL_UART_Receive+0x8a>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e003      	b.n	8001b20 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b28:	e043      	b.n	8001bb2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2120      	movs	r1, #32
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f84c 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e042      	b.n	8001bca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e01f      	b.n	8001ba4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6c:	d007      	beq.n	8001b7e <HAL_UART_Receive+0xf0>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_UART_Receive+0xfe>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e008      	b.n	8001b9e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1b6      	bne.n	8001b2a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be2:	e02c      	b.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bea:	d028      	beq.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf2:	f7fe ff65 	bl	8000ac0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d21d      	bcs.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e00f      	b.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4013      	ands	r3, r2
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d0c3      	beq.n	8001be4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ca2:	f023 030c 	bic.w	r3, r3, #12
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <UART_SetConfig+0x114>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d103      	bne.n	8001cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cd0:	f7ff fdcc 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f7ff fdb4 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <UART_SetConfig+0x118>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	0119      	lsls	r1, r3, #4
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009a      	lsls	r2, r3, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <UART_SetConfig+0x118>)
 8001d16:	fba3 0302 	umull	r0, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	3332      	adds	r3, #50	; 0x32
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <UART_SetConfig+0x118>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	4419      	add	r1, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <UART_SetConfig+0x118>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	440a      	add	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	51eb851f 	.word	0x51eb851f

08001d84 <__errno>:
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <__errno+0x8>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2600      	movs	r6, #0
 8001d94:	4d0c      	ldr	r5, [pc, #48]	; (8001dc8 <__libc_init_array+0x38>)
 8001d96:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d98:	1b64      	subs	r4, r4, r5
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	42a6      	cmp	r6, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	f000 fc2c 	bl	80025fc <_init>
 8001da4:	2600      	movs	r6, #0
 8001da6:	4d0a      	ldr	r5, [pc, #40]	; (8001dd0 <__libc_init_array+0x40>)
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <__libc_init_array+0x44>)
 8001daa:	1b64      	subs	r4, r4, r5
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a6      	cmp	r6, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db8:	4798      	blx	r3
 8001dba:	3601      	adds	r6, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc2:	4798      	blx	r3
 8001dc4:	3601      	adds	r6, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	080026a0 	.word	0x080026a0
 8001dcc:	080026a0 	.word	0x080026a0
 8001dd0:	080026a0 	.word	0x080026a0
 8001dd4:	080026a4 	.word	0x080026a4

08001dd8 <memset>:
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4402      	add	r2, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	f803 1b01 	strb.w	r1, [r3], #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <setvbuf>:
 8001de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001dec:	461d      	mov	r5, r3
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <setvbuf+0x17c>)
 8001df0:	4604      	mov	r4, r0
 8001df2:	681f      	ldr	r7, [r3, #0]
 8001df4:	460e      	mov	r6, r1
 8001df6:	4690      	mov	r8, r2
 8001df8:	b127      	cbz	r7, 8001e04 <setvbuf+0x1c>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	b913      	cbnz	r3, 8001e04 <setvbuf+0x1c>
 8001dfe:	4638      	mov	r0, r7
 8001e00:	f000 f9d2 	bl	80021a8 <__sinit>
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <setvbuf+0x180>)
 8001e06:	429c      	cmp	r4, r3
 8001e08:	d167      	bne.n	8001eda <setvbuf+0xf2>
 8001e0a:	687c      	ldr	r4, [r7, #4]
 8001e0c:	f1b8 0f02 	cmp.w	r8, #2
 8001e10:	d006      	beq.n	8001e20 <setvbuf+0x38>
 8001e12:	f1b8 0f01 	cmp.w	r8, #1
 8001e16:	f200 809f 	bhi.w	8001f58 <setvbuf+0x170>
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	f2c0 809c 	blt.w	8001f58 <setvbuf+0x170>
 8001e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e22:	07db      	lsls	r3, r3, #31
 8001e24:	d405      	bmi.n	8001e32 <setvbuf+0x4a>
 8001e26:	89a3      	ldrh	r3, [r4, #12]
 8001e28:	0598      	lsls	r0, r3, #22
 8001e2a:	d402      	bmi.n	8001e32 <setvbuf+0x4a>
 8001e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e2e:	f000 fa59 	bl	80022e4 <__retarget_lock_acquire_recursive>
 8001e32:	4621      	mov	r1, r4
 8001e34:	4638      	mov	r0, r7
 8001e36:	f000 f923 	bl	8002080 <_fflush_r>
 8001e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e3c:	b141      	cbz	r1, 8001e50 <setvbuf+0x68>
 8001e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e42:	4299      	cmp	r1, r3
 8001e44:	d002      	beq.n	8001e4c <setvbuf+0x64>
 8001e46:	4638      	mov	r0, r7
 8001e48:	f000 fa7a 	bl	8002340 <_free_r>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6363      	str	r3, [r4, #52]	; 0x34
 8001e50:	2300      	movs	r3, #0
 8001e52:	61a3      	str	r3, [r4, #24]
 8001e54:	6063      	str	r3, [r4, #4]
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	0619      	lsls	r1, r3, #24
 8001e5a:	d503      	bpl.n	8001e64 <setvbuf+0x7c>
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	6921      	ldr	r1, [r4, #16]
 8001e60:	f000 fa6e 	bl	8002340 <_free_r>
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	f1b8 0f02 	cmp.w	r8, #2
 8001e6a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	d06c      	beq.n	8001f50 <setvbuf+0x168>
 8001e76:	ab01      	add	r3, sp, #4
 8001e78:	466a      	mov	r2, sp
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4638      	mov	r0, r7
 8001e7e:	f000 fa33 	bl	80022e8 <__swhatbuf_r>
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	4318      	orrs	r0, r3
 8001e86:	81a0      	strh	r0, [r4, #12]
 8001e88:	2d00      	cmp	r5, #0
 8001e8a:	d130      	bne.n	8001eee <setvbuf+0x106>
 8001e8c:	9d00      	ldr	r5, [sp, #0]
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 fa4e 	bl	8002330 <malloc>
 8001e94:	4606      	mov	r6, r0
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d155      	bne.n	8001f46 <setvbuf+0x15e>
 8001e9a:	f8dd 9000 	ldr.w	r9, [sp]
 8001e9e:	45a9      	cmp	r9, r5
 8001ea0:	d14a      	bne.n	8001f38 <setvbuf+0x150>
 8001ea2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60a2      	str	r2, [r4, #8]
 8001eaa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001eae:	6022      	str	r2, [r4, #0]
 8001eb0:	6122      	str	r2, [r4, #16]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eb8:	6162      	str	r2, [r4, #20]
 8001eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	07d2      	lsls	r2, r2, #31
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	d405      	bmi.n	8001ed2 <setvbuf+0xea>
 8001ec6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001eca:	d102      	bne.n	8001ed2 <setvbuf+0xea>
 8001ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ece:	f000 fa0a 	bl	80022e6 <__retarget_lock_release_recursive>
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	b003      	add	sp, #12
 8001ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <setvbuf+0x184>)
 8001edc:	429c      	cmp	r4, r3
 8001ede:	d101      	bne.n	8001ee4 <setvbuf+0xfc>
 8001ee0:	68bc      	ldr	r4, [r7, #8]
 8001ee2:	e793      	b.n	8001e0c <setvbuf+0x24>
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <setvbuf+0x188>)
 8001ee6:	429c      	cmp	r4, r3
 8001ee8:	bf08      	it	eq
 8001eea:	68fc      	ldreq	r4, [r7, #12]
 8001eec:	e78e      	b.n	8001e0c <setvbuf+0x24>
 8001eee:	2e00      	cmp	r6, #0
 8001ef0:	d0cd      	beq.n	8001e8e <setvbuf+0xa6>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	b913      	cbnz	r3, 8001efc <setvbuf+0x114>
 8001ef6:	4638      	mov	r0, r7
 8001ef8:	f000 f956 	bl	80021a8 <__sinit>
 8001efc:	f1b8 0f01 	cmp.w	r8, #1
 8001f00:	bf08      	it	eq
 8001f02:	89a3      	ldrheq	r3, [r4, #12]
 8001f04:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001f08:	bf04      	itt	eq
 8001f0a:	f043 0301 	orreq.w	r3, r3, #1
 8001f0e:	81a3      	strheq	r3, [r4, #12]
 8001f10:	89a2      	ldrh	r2, [r4, #12]
 8001f12:	6026      	str	r6, [r4, #0]
 8001f14:	f012 0308 	ands.w	r3, r2, #8
 8001f18:	d01c      	beq.n	8001f54 <setvbuf+0x16c>
 8001f1a:	07d3      	lsls	r3, r2, #31
 8001f1c:	bf41      	itttt	mi
 8001f1e:	2300      	movmi	r3, #0
 8001f20:	426d      	negmi	r5, r5
 8001f22:	60a3      	strmi	r3, [r4, #8]
 8001f24:	61a5      	strmi	r5, [r4, #24]
 8001f26:	bf58      	it	pl
 8001f28:	60a5      	strpl	r5, [r4, #8]
 8001f2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001f2c:	f015 0501 	ands.w	r5, r5, #1
 8001f30:	d115      	bne.n	8001f5e <setvbuf+0x176>
 8001f32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001f36:	e7c8      	b.n	8001eca <setvbuf+0xe2>
 8001f38:	4648      	mov	r0, r9
 8001f3a:	f000 f9f9 	bl	8002330 <malloc>
 8001f3e:	4606      	mov	r6, r0
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d0ae      	beq.n	8001ea2 <setvbuf+0xba>
 8001f44:	464d      	mov	r5, r9
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	81a3      	strh	r3, [r4, #12]
 8001f4e:	e7d0      	b.n	8001ef2 <setvbuf+0x10a>
 8001f50:	2500      	movs	r5, #0
 8001f52:	e7a8      	b.n	8001ea6 <setvbuf+0xbe>
 8001f54:	60a3      	str	r3, [r4, #8]
 8001f56:	e7e8      	b.n	8001f2a <setvbuf+0x142>
 8001f58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001f5c:	e7b9      	b.n	8001ed2 <setvbuf+0xea>
 8001f5e:	2500      	movs	r5, #0
 8001f60:	e7b7      	b.n	8001ed2 <setvbuf+0xea>
 8001f62:	bf00      	nop
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	08002660 	.word	0x08002660
 8001f6c:	08002680 	.word	0x08002680
 8001f70:	08002640 	.word	0x08002640

08001f74 <__sflush_r>:
 8001f74:	898a      	ldrh	r2, [r1, #12]
 8001f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	0710      	lsls	r0, r2, #28
 8001f7e:	460c      	mov	r4, r1
 8001f80:	d458      	bmi.n	8002034 <__sflush_r+0xc0>
 8001f82:	684b      	ldr	r3, [r1, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	dc05      	bgt.n	8001f94 <__sflush_r+0x20>
 8001f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dc02      	bgt.n	8001f94 <__sflush_r+0x20>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d0f9      	beq.n	8001f8e <__sflush_r+0x1a>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fa0:	682f      	ldr	r7, [r5, #0]
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	d032      	beq.n	800200c <__sflush_r+0x98>
 8001fa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	075a      	lsls	r2, r3, #29
 8001fac:	d505      	bpl.n	8001fba <__sflush_r+0x46>
 8001fae:	6863      	ldr	r3, [r4, #4]
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fb4:	b10b      	cbz	r3, 8001fba <__sflush_r+0x46>
 8001fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb8:	1ac0      	subs	r0, r0, r3
 8001fba:	2300      	movs	r3, #0
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	6a21      	ldr	r1, [r4, #32]
 8001fc4:	47b0      	blx	r6
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	d106      	bne.n	8001fda <__sflush_r+0x66>
 8001fcc:	6829      	ldr	r1, [r5, #0]
 8001fce:	291d      	cmp	r1, #29
 8001fd0:	d82c      	bhi.n	800202c <__sflush_r+0xb8>
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <__sflush_r+0x108>)
 8001fd4:	40ca      	lsrs	r2, r1
 8001fd6:	07d6      	lsls	r6, r2, #31
 8001fd8:	d528      	bpl.n	800202c <__sflush_r+0xb8>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	6062      	str	r2, [r4, #4]
 8001fde:	6922      	ldr	r2, [r4, #16]
 8001fe0:	04d9      	lsls	r1, r3, #19
 8001fe2:	6022      	str	r2, [r4, #0]
 8001fe4:	d504      	bpl.n	8001ff0 <__sflush_r+0x7c>
 8001fe6:	1c42      	adds	r2, r0, #1
 8001fe8:	d101      	bne.n	8001fee <__sflush_r+0x7a>
 8001fea:	682b      	ldr	r3, [r5, #0]
 8001fec:	b903      	cbnz	r3, 8001ff0 <__sflush_r+0x7c>
 8001fee:	6560      	str	r0, [r4, #84]	; 0x54
 8001ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ff2:	602f      	str	r7, [r5, #0]
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	d0ca      	beq.n	8001f8e <__sflush_r+0x1a>
 8001ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ffc:	4299      	cmp	r1, r3
 8001ffe:	d002      	beq.n	8002006 <__sflush_r+0x92>
 8002000:	4628      	mov	r0, r5
 8002002:	f000 f99d 	bl	8002340 <_free_r>
 8002006:	2000      	movs	r0, #0
 8002008:	6360      	str	r0, [r4, #52]	; 0x34
 800200a:	e7c1      	b.n	8001f90 <__sflush_r+0x1c>
 800200c:	6a21      	ldr	r1, [r4, #32]
 800200e:	2301      	movs	r3, #1
 8002010:	4628      	mov	r0, r5
 8002012:	47b0      	blx	r6
 8002014:	1c41      	adds	r1, r0, #1
 8002016:	d1c7      	bne.n	8001fa8 <__sflush_r+0x34>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0c4      	beq.n	8001fa8 <__sflush_r+0x34>
 800201e:	2b1d      	cmp	r3, #29
 8002020:	d001      	beq.n	8002026 <__sflush_r+0xb2>
 8002022:	2b16      	cmp	r3, #22
 8002024:	d101      	bne.n	800202a <__sflush_r+0xb6>
 8002026:	602f      	str	r7, [r5, #0]
 8002028:	e7b1      	b.n	8001f8e <__sflush_r+0x1a>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	e7ad      	b.n	8001f90 <__sflush_r+0x1c>
 8002034:	690f      	ldr	r7, [r1, #16]
 8002036:	2f00      	cmp	r7, #0
 8002038:	d0a9      	beq.n	8001f8e <__sflush_r+0x1a>
 800203a:	0793      	lsls	r3, r2, #30
 800203c:	bf18      	it	ne
 800203e:	2300      	movne	r3, #0
 8002040:	680e      	ldr	r6, [r1, #0]
 8002042:	bf08      	it	eq
 8002044:	694b      	ldreq	r3, [r1, #20]
 8002046:	eba6 0807 	sub.w	r8, r6, r7
 800204a:	600f      	str	r7, [r1, #0]
 800204c:	608b      	str	r3, [r1, #8]
 800204e:	f1b8 0f00 	cmp.w	r8, #0
 8002052:	dd9c      	ble.n	8001f8e <__sflush_r+0x1a>
 8002054:	4643      	mov	r3, r8
 8002056:	463a      	mov	r2, r7
 8002058:	4628      	mov	r0, r5
 800205a:	6a21      	ldr	r1, [r4, #32]
 800205c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800205e:	47b0      	blx	r6
 8002060:	2800      	cmp	r0, #0
 8002062:	dc06      	bgt.n	8002072 <__sflush_r+0xfe>
 8002064:	89a3      	ldrh	r3, [r4, #12]
 8002066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	81a3      	strh	r3, [r4, #12]
 8002070:	e78e      	b.n	8001f90 <__sflush_r+0x1c>
 8002072:	4407      	add	r7, r0
 8002074:	eba8 0800 	sub.w	r8, r8, r0
 8002078:	e7e9      	b.n	800204e <__sflush_r+0xda>
 800207a:	bf00      	nop
 800207c:	20400001 	.word	0x20400001

08002080 <_fflush_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	690b      	ldr	r3, [r1, #16]
 8002084:	4605      	mov	r5, r0
 8002086:	460c      	mov	r4, r1
 8002088:	b913      	cbnz	r3, 8002090 <_fflush_r+0x10>
 800208a:	2500      	movs	r5, #0
 800208c:	4628      	mov	r0, r5
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	b118      	cbz	r0, 800209a <_fflush_r+0x1a>
 8002092:	6983      	ldr	r3, [r0, #24]
 8002094:	b90b      	cbnz	r3, 800209a <_fflush_r+0x1a>
 8002096:	f000 f887 	bl	80021a8 <__sinit>
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <_fflush_r+0x6c>)
 800209c:	429c      	cmp	r4, r3
 800209e:	d11b      	bne.n	80020d8 <_fflush_r+0x58>
 80020a0:	686c      	ldr	r4, [r5, #4]
 80020a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0ef      	beq.n	800208a <_fflush_r+0xa>
 80020aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020ac:	07d0      	lsls	r0, r2, #31
 80020ae:	d404      	bmi.n	80020ba <_fflush_r+0x3a>
 80020b0:	0599      	lsls	r1, r3, #22
 80020b2:	d402      	bmi.n	80020ba <_fflush_r+0x3a>
 80020b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020b6:	f000 f915 	bl	80022e4 <__retarget_lock_acquire_recursive>
 80020ba:	4628      	mov	r0, r5
 80020bc:	4621      	mov	r1, r4
 80020be:	f7ff ff59 	bl	8001f74 <__sflush_r>
 80020c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020c4:	4605      	mov	r5, r0
 80020c6:	07da      	lsls	r2, r3, #31
 80020c8:	d4e0      	bmi.n	800208c <_fflush_r+0xc>
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	059b      	lsls	r3, r3, #22
 80020ce:	d4dd      	bmi.n	800208c <_fflush_r+0xc>
 80020d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020d2:	f000 f908 	bl	80022e6 <__retarget_lock_release_recursive>
 80020d6:	e7d9      	b.n	800208c <_fflush_r+0xc>
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <_fflush_r+0x70>)
 80020da:	429c      	cmp	r4, r3
 80020dc:	d101      	bne.n	80020e2 <_fflush_r+0x62>
 80020de:	68ac      	ldr	r4, [r5, #8]
 80020e0:	e7df      	b.n	80020a2 <_fflush_r+0x22>
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <_fflush_r+0x74>)
 80020e4:	429c      	cmp	r4, r3
 80020e6:	bf08      	it	eq
 80020e8:	68ec      	ldreq	r4, [r5, #12]
 80020ea:	e7da      	b.n	80020a2 <_fflush_r+0x22>
 80020ec:	08002660 	.word	0x08002660
 80020f0:	08002680 	.word	0x08002680
 80020f4:	08002640 	.word	0x08002640

080020f8 <std>:
 80020f8:	2300      	movs	r3, #0
 80020fa:	b510      	push	{r4, lr}
 80020fc:	4604      	mov	r4, r0
 80020fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002106:	6083      	str	r3, [r0, #8]
 8002108:	8181      	strh	r1, [r0, #12]
 800210a:	6643      	str	r3, [r0, #100]	; 0x64
 800210c:	81c2      	strh	r2, [r0, #14]
 800210e:	6183      	str	r3, [r0, #24]
 8002110:	4619      	mov	r1, r3
 8002112:	2208      	movs	r2, #8
 8002114:	305c      	adds	r0, #92	; 0x5c
 8002116:	f7ff fe5f 	bl	8001dd8 <memset>
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <std+0x38>)
 800211c:	6224      	str	r4, [r4, #32]
 800211e:	6263      	str	r3, [r4, #36]	; 0x24
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <std+0x3c>)
 8002122:	62a3      	str	r3, [r4, #40]	; 0x28
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <std+0x40>)
 8002126:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <std+0x44>)
 800212a:	6323      	str	r3, [r4, #48]	; 0x30
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	080024ad 	.word	0x080024ad
 8002134:	080024cf 	.word	0x080024cf
 8002138:	08002507 	.word	0x08002507
 800213c:	0800252b 	.word	0x0800252b

08002140 <_cleanup_r>:
 8002140:	4901      	ldr	r1, [pc, #4]	; (8002148 <_cleanup_r+0x8>)
 8002142:	f000 b8af 	b.w	80022a4 <_fwalk_reent>
 8002146:	bf00      	nop
 8002148:	08002081 	.word	0x08002081

0800214c <__sfmoreglue>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	2568      	movs	r5, #104	; 0x68
 8002150:	1e4a      	subs	r2, r1, #1
 8002152:	4355      	muls	r5, r2
 8002154:	460e      	mov	r6, r1
 8002156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800215a:	f000 f93d 	bl	80023d8 <_malloc_r>
 800215e:	4604      	mov	r4, r0
 8002160:	b140      	cbz	r0, 8002174 <__sfmoreglue+0x28>
 8002162:	2100      	movs	r1, #0
 8002164:	e9c0 1600 	strd	r1, r6, [r0]
 8002168:	300c      	adds	r0, #12
 800216a:	60a0      	str	r0, [r4, #8]
 800216c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002170:	f7ff fe32 	bl	8001dd8 <memset>
 8002174:	4620      	mov	r0, r4
 8002176:	bd70      	pop	{r4, r5, r6, pc}

08002178 <__sfp_lock_acquire>:
 8002178:	4801      	ldr	r0, [pc, #4]	; (8002180 <__sfp_lock_acquire+0x8>)
 800217a:	f000 b8b3 	b.w	80022e4 <__retarget_lock_acquire_recursive>
 800217e:	bf00      	nop
 8002180:	200000ec 	.word	0x200000ec

08002184 <__sfp_lock_release>:
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <__sfp_lock_release+0x8>)
 8002186:	f000 b8ae 	b.w	80022e6 <__retarget_lock_release_recursive>
 800218a:	bf00      	nop
 800218c:	200000ec 	.word	0x200000ec

08002190 <__sinit_lock_acquire>:
 8002190:	4801      	ldr	r0, [pc, #4]	; (8002198 <__sinit_lock_acquire+0x8>)
 8002192:	f000 b8a7 	b.w	80022e4 <__retarget_lock_acquire_recursive>
 8002196:	bf00      	nop
 8002198:	200000e7 	.word	0x200000e7

0800219c <__sinit_lock_release>:
 800219c:	4801      	ldr	r0, [pc, #4]	; (80021a4 <__sinit_lock_release+0x8>)
 800219e:	f000 b8a2 	b.w	80022e6 <__retarget_lock_release_recursive>
 80021a2:	bf00      	nop
 80021a4:	200000e7 	.word	0x200000e7

080021a8 <__sinit>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	f7ff fff0 	bl	8002190 <__sinit_lock_acquire>
 80021b0:	69a3      	ldr	r3, [r4, #24]
 80021b2:	b11b      	cbz	r3, 80021bc <__sinit+0x14>
 80021b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b8:	f7ff bff0 	b.w	800219c <__sinit_lock_release>
 80021bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80021c0:	6523      	str	r3, [r4, #80]	; 0x50
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <__sinit+0x68>)
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <__sinit+0x6c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80021ca:	42a3      	cmp	r3, r4
 80021cc:	bf08      	it	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	4620      	mov	r0, r4
 80021d2:	bf08      	it	eq
 80021d4:	61a3      	streq	r3, [r4, #24]
 80021d6:	f000 f81f 	bl	8002218 <__sfp>
 80021da:	6060      	str	r0, [r4, #4]
 80021dc:	4620      	mov	r0, r4
 80021de:	f000 f81b 	bl	8002218 <__sfp>
 80021e2:	60a0      	str	r0, [r4, #8]
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 f817 	bl	8002218 <__sfp>
 80021ea:	2200      	movs	r2, #0
 80021ec:	2104      	movs	r1, #4
 80021ee:	60e0      	str	r0, [r4, #12]
 80021f0:	6860      	ldr	r0, [r4, #4]
 80021f2:	f7ff ff81 	bl	80020f8 <std>
 80021f6:	2201      	movs	r2, #1
 80021f8:	2109      	movs	r1, #9
 80021fa:	68a0      	ldr	r0, [r4, #8]
 80021fc:	f7ff ff7c 	bl	80020f8 <std>
 8002200:	2202      	movs	r2, #2
 8002202:	2112      	movs	r1, #18
 8002204:	68e0      	ldr	r0, [r4, #12]
 8002206:	f7ff ff77 	bl	80020f8 <std>
 800220a:	2301      	movs	r3, #1
 800220c:	61a3      	str	r3, [r4, #24]
 800220e:	e7d1      	b.n	80021b4 <__sinit+0xc>
 8002210:	0800263c 	.word	0x0800263c
 8002214:	08002141 	.word	0x08002141

08002218 <__sfp>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	4607      	mov	r7, r0
 800221c:	f7ff ffac 	bl	8002178 <__sfp_lock_acquire>
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <__sfp+0x84>)
 8002222:	681e      	ldr	r6, [r3, #0]
 8002224:	69b3      	ldr	r3, [r6, #24]
 8002226:	b913      	cbnz	r3, 800222e <__sfp+0x16>
 8002228:	4630      	mov	r0, r6
 800222a:	f7ff ffbd 	bl	80021a8 <__sinit>
 800222e:	3648      	adds	r6, #72	; 0x48
 8002230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002234:	3b01      	subs	r3, #1
 8002236:	d503      	bpl.n	8002240 <__sfp+0x28>
 8002238:	6833      	ldr	r3, [r6, #0]
 800223a:	b30b      	cbz	r3, 8002280 <__sfp+0x68>
 800223c:	6836      	ldr	r6, [r6, #0]
 800223e:	e7f7      	b.n	8002230 <__sfp+0x18>
 8002240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002244:	b9d5      	cbnz	r5, 800227c <__sfp+0x64>
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <__sfp+0x88>)
 8002248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800224c:	60e3      	str	r3, [r4, #12]
 800224e:	6665      	str	r5, [r4, #100]	; 0x64
 8002250:	f000 f847 	bl	80022e2 <__retarget_lock_init_recursive>
 8002254:	f7ff ff96 	bl	8002184 <__sfp_lock_release>
 8002258:	2208      	movs	r2, #8
 800225a:	4629      	mov	r1, r5
 800225c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002264:	6025      	str	r5, [r4, #0]
 8002266:	61a5      	str	r5, [r4, #24]
 8002268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800226c:	f7ff fdb4 	bl	8001dd8 <memset>
 8002270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002278:	4620      	mov	r0, r4
 800227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227c:	3468      	adds	r4, #104	; 0x68
 800227e:	e7d9      	b.n	8002234 <__sfp+0x1c>
 8002280:	2104      	movs	r1, #4
 8002282:	4638      	mov	r0, r7
 8002284:	f7ff ff62 	bl	800214c <__sfmoreglue>
 8002288:	4604      	mov	r4, r0
 800228a:	6030      	str	r0, [r6, #0]
 800228c:	2800      	cmp	r0, #0
 800228e:	d1d5      	bne.n	800223c <__sfp+0x24>
 8002290:	f7ff ff78 	bl	8002184 <__sfp_lock_release>
 8002294:	230c      	movs	r3, #12
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	e7ee      	b.n	8002278 <__sfp+0x60>
 800229a:	bf00      	nop
 800229c:	0800263c 	.word	0x0800263c
 80022a0:	ffff0001 	.word	0xffff0001

080022a4 <_fwalk_reent>:
 80022a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a8:	4606      	mov	r6, r0
 80022aa:	4688      	mov	r8, r1
 80022ac:	2700      	movs	r7, #0
 80022ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022b6:	f1b9 0901 	subs.w	r9, r9, #1
 80022ba:	d505      	bpl.n	80022c8 <_fwalk_reent+0x24>
 80022bc:	6824      	ldr	r4, [r4, #0]
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d1f7      	bne.n	80022b2 <_fwalk_reent+0xe>
 80022c2:	4638      	mov	r0, r7
 80022c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c8:	89ab      	ldrh	r3, [r5, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d907      	bls.n	80022de <_fwalk_reent+0x3a>
 80022ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022d2:	3301      	adds	r3, #1
 80022d4:	d003      	beq.n	80022de <_fwalk_reent+0x3a>
 80022d6:	4629      	mov	r1, r5
 80022d8:	4630      	mov	r0, r6
 80022da:	47c0      	blx	r8
 80022dc:	4307      	orrs	r7, r0
 80022de:	3568      	adds	r5, #104	; 0x68
 80022e0:	e7e9      	b.n	80022b6 <_fwalk_reent+0x12>

080022e2 <__retarget_lock_init_recursive>:
 80022e2:	4770      	bx	lr

080022e4 <__retarget_lock_acquire_recursive>:
 80022e4:	4770      	bx	lr

080022e6 <__retarget_lock_release_recursive>:
 80022e6:	4770      	bx	lr

080022e8 <__swhatbuf_r>:
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	460e      	mov	r6, r1
 80022ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f0:	4614      	mov	r4, r2
 80022f2:	2900      	cmp	r1, #0
 80022f4:	461d      	mov	r5, r3
 80022f6:	b096      	sub	sp, #88	; 0x58
 80022f8:	da07      	bge.n	800230a <__swhatbuf_r+0x22>
 80022fa:	2300      	movs	r3, #0
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	89b3      	ldrh	r3, [r6, #12]
 8002300:	061a      	lsls	r2, r3, #24
 8002302:	d410      	bmi.n	8002326 <__swhatbuf_r+0x3e>
 8002304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002308:	e00e      	b.n	8002328 <__swhatbuf_r+0x40>
 800230a:	466a      	mov	r2, sp
 800230c:	f000 f934 	bl	8002578 <_fstat_r>
 8002310:	2800      	cmp	r0, #0
 8002312:	dbf2      	blt.n	80022fa <__swhatbuf_r+0x12>
 8002314:	9a01      	ldr	r2, [sp, #4]
 8002316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800231a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800231e:	425a      	negs	r2, r3
 8002320:	415a      	adcs	r2, r3
 8002322:	602a      	str	r2, [r5, #0]
 8002324:	e7ee      	b.n	8002304 <__swhatbuf_r+0x1c>
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	2000      	movs	r0, #0
 800232a:	6023      	str	r3, [r4, #0]
 800232c:	b016      	add	sp, #88	; 0x58
 800232e:	bd70      	pop	{r4, r5, r6, pc}

08002330 <malloc>:
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <malloc+0xc>)
 8002332:	4601      	mov	r1, r0
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f000 b84f 	b.w	80023d8 <_malloc_r>
 800233a:	bf00      	nop
 800233c:	2000000c 	.word	0x2000000c

08002340 <_free_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4605      	mov	r5, r0
 8002344:	2900      	cmp	r1, #0
 8002346:	d043      	beq.n	80023d0 <_free_r+0x90>
 8002348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800234c:	1f0c      	subs	r4, r1, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	bfb8      	it	lt
 8002352:	18e4      	addlt	r4, r4, r3
 8002354:	f000 f934 	bl	80025c0 <__malloc_lock>
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <_free_r+0x94>)
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	4610      	mov	r0, r2
 800235e:	b933      	cbnz	r3, 800236e <_free_r+0x2e>
 8002360:	6063      	str	r3, [r4, #4]
 8002362:	6014      	str	r4, [r2, #0]
 8002364:	4628      	mov	r0, r5
 8002366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800236a:	f000 b92f 	b.w	80025cc <__malloc_unlock>
 800236e:	42a3      	cmp	r3, r4
 8002370:	d90a      	bls.n	8002388 <_free_r+0x48>
 8002372:	6821      	ldr	r1, [r4, #0]
 8002374:	1862      	adds	r2, r4, r1
 8002376:	4293      	cmp	r3, r2
 8002378:	bf01      	itttt	eq
 800237a:	681a      	ldreq	r2, [r3, #0]
 800237c:	685b      	ldreq	r3, [r3, #4]
 800237e:	1852      	addeq	r2, r2, r1
 8002380:	6022      	streq	r2, [r4, #0]
 8002382:	6063      	str	r3, [r4, #4]
 8002384:	6004      	str	r4, [r0, #0]
 8002386:	e7ed      	b.n	8002364 <_free_r+0x24>
 8002388:	461a      	mov	r2, r3
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	b10b      	cbz	r3, 8002392 <_free_r+0x52>
 800238e:	42a3      	cmp	r3, r4
 8002390:	d9fa      	bls.n	8002388 <_free_r+0x48>
 8002392:	6811      	ldr	r1, [r2, #0]
 8002394:	1850      	adds	r0, r2, r1
 8002396:	42a0      	cmp	r0, r4
 8002398:	d10b      	bne.n	80023b2 <_free_r+0x72>
 800239a:	6820      	ldr	r0, [r4, #0]
 800239c:	4401      	add	r1, r0
 800239e:	1850      	adds	r0, r2, r1
 80023a0:	4283      	cmp	r3, r0
 80023a2:	6011      	str	r1, [r2, #0]
 80023a4:	d1de      	bne.n	8002364 <_free_r+0x24>
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4401      	add	r1, r0
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	6053      	str	r3, [r2, #4]
 80023b0:	e7d8      	b.n	8002364 <_free_r+0x24>
 80023b2:	d902      	bls.n	80023ba <_free_r+0x7a>
 80023b4:	230c      	movs	r3, #12
 80023b6:	602b      	str	r3, [r5, #0]
 80023b8:	e7d4      	b.n	8002364 <_free_r+0x24>
 80023ba:	6820      	ldr	r0, [r4, #0]
 80023bc:	1821      	adds	r1, r4, r0
 80023be:	428b      	cmp	r3, r1
 80023c0:	bf01      	itttt	eq
 80023c2:	6819      	ldreq	r1, [r3, #0]
 80023c4:	685b      	ldreq	r3, [r3, #4]
 80023c6:	1809      	addeq	r1, r1, r0
 80023c8:	6021      	streq	r1, [r4, #0]
 80023ca:	6063      	str	r3, [r4, #4]
 80023cc:	6054      	str	r4, [r2, #4]
 80023ce:	e7c9      	b.n	8002364 <_free_r+0x24>
 80023d0:	bd38      	pop	{r3, r4, r5, pc}
 80023d2:	bf00      	nop
 80023d4:	20000090 	.word	0x20000090

080023d8 <_malloc_r>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	1ccd      	adds	r5, r1, #3
 80023dc:	f025 0503 	bic.w	r5, r5, #3
 80023e0:	3508      	adds	r5, #8
 80023e2:	2d0c      	cmp	r5, #12
 80023e4:	bf38      	it	cc
 80023e6:	250c      	movcc	r5, #12
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	4606      	mov	r6, r0
 80023ec:	db01      	blt.n	80023f2 <_malloc_r+0x1a>
 80023ee:	42a9      	cmp	r1, r5
 80023f0:	d903      	bls.n	80023fa <_malloc_r+0x22>
 80023f2:	230c      	movs	r3, #12
 80023f4:	6033      	str	r3, [r6, #0]
 80023f6:	2000      	movs	r0, #0
 80023f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fa:	f000 f8e1 	bl	80025c0 <__malloc_lock>
 80023fe:	4921      	ldr	r1, [pc, #132]	; (8002484 <_malloc_r+0xac>)
 8002400:	680a      	ldr	r2, [r1, #0]
 8002402:	4614      	mov	r4, r2
 8002404:	b99c      	cbnz	r4, 800242e <_malloc_r+0x56>
 8002406:	4f20      	ldr	r7, [pc, #128]	; (8002488 <_malloc_r+0xb0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b923      	cbnz	r3, 8002416 <_malloc_r+0x3e>
 800240c:	4621      	mov	r1, r4
 800240e:	4630      	mov	r0, r6
 8002410:	f000 f83c 	bl	800248c <_sbrk_r>
 8002414:	6038      	str	r0, [r7, #0]
 8002416:	4629      	mov	r1, r5
 8002418:	4630      	mov	r0, r6
 800241a:	f000 f837 	bl	800248c <_sbrk_r>
 800241e:	1c43      	adds	r3, r0, #1
 8002420:	d123      	bne.n	800246a <_malloc_r+0x92>
 8002422:	230c      	movs	r3, #12
 8002424:	4630      	mov	r0, r6
 8002426:	6033      	str	r3, [r6, #0]
 8002428:	f000 f8d0 	bl	80025cc <__malloc_unlock>
 800242c:	e7e3      	b.n	80023f6 <_malloc_r+0x1e>
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	1b5b      	subs	r3, r3, r5
 8002432:	d417      	bmi.n	8002464 <_malloc_r+0x8c>
 8002434:	2b0b      	cmp	r3, #11
 8002436:	d903      	bls.n	8002440 <_malloc_r+0x68>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	441c      	add	r4, r3
 800243c:	6025      	str	r5, [r4, #0]
 800243e:	e004      	b.n	800244a <_malloc_r+0x72>
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	42a2      	cmp	r2, r4
 8002444:	bf0c      	ite	eq
 8002446:	600b      	streq	r3, [r1, #0]
 8002448:	6053      	strne	r3, [r2, #4]
 800244a:	4630      	mov	r0, r6
 800244c:	f000 f8be 	bl	80025cc <__malloc_unlock>
 8002450:	f104 000b 	add.w	r0, r4, #11
 8002454:	1d23      	adds	r3, r4, #4
 8002456:	f020 0007 	bic.w	r0, r0, #7
 800245a:	1ac2      	subs	r2, r0, r3
 800245c:	d0cc      	beq.n	80023f8 <_malloc_r+0x20>
 800245e:	1a1b      	subs	r3, r3, r0
 8002460:	50a3      	str	r3, [r4, r2]
 8002462:	e7c9      	b.n	80023f8 <_malloc_r+0x20>
 8002464:	4622      	mov	r2, r4
 8002466:	6864      	ldr	r4, [r4, #4]
 8002468:	e7cc      	b.n	8002404 <_malloc_r+0x2c>
 800246a:	1cc4      	adds	r4, r0, #3
 800246c:	f024 0403 	bic.w	r4, r4, #3
 8002470:	42a0      	cmp	r0, r4
 8002472:	d0e3      	beq.n	800243c <_malloc_r+0x64>
 8002474:	1a21      	subs	r1, r4, r0
 8002476:	4630      	mov	r0, r6
 8002478:	f000 f808 	bl	800248c <_sbrk_r>
 800247c:	3001      	adds	r0, #1
 800247e:	d1dd      	bne.n	800243c <_malloc_r+0x64>
 8002480:	e7cf      	b.n	8002422 <_malloc_r+0x4a>
 8002482:	bf00      	nop
 8002484:	20000090 	.word	0x20000090
 8002488:	20000094 	.word	0x20000094

0800248c <_sbrk_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	2300      	movs	r3, #0
 8002490:	4d05      	ldr	r5, [pc, #20]	; (80024a8 <_sbrk_r+0x1c>)
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	f7fe fa58 	bl	800094c <_sbrk>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_sbrk_r+0x1a>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_sbrk_r+0x1a>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	200000f0 	.word	0x200000f0

080024ac <__sread>:
 80024ac:	b510      	push	{r4, lr}
 80024ae:	460c      	mov	r4, r1
 80024b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b4:	f000 f890 	bl	80025d8 <_read_r>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	bfab      	itete	ge
 80024bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024be:	89a3      	ldrhlt	r3, [r4, #12]
 80024c0:	181b      	addge	r3, r3, r0
 80024c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024c6:	bfac      	ite	ge
 80024c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80024ca:	81a3      	strhlt	r3, [r4, #12]
 80024cc:	bd10      	pop	{r4, pc}

080024ce <__swrite>:
 80024ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d2:	461f      	mov	r7, r3
 80024d4:	898b      	ldrh	r3, [r1, #12]
 80024d6:	4605      	mov	r5, r0
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	460c      	mov	r4, r1
 80024dc:	4616      	mov	r6, r2
 80024de:	d505      	bpl.n	80024ec <__swrite+0x1e>
 80024e0:	2302      	movs	r3, #2
 80024e2:	2200      	movs	r2, #0
 80024e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e8:	f000 f858 	bl	800259c <_lseek_r>
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	4632      	mov	r2, r6
 80024f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024f4:	81a3      	strh	r3, [r4, #12]
 80024f6:	4628      	mov	r0, r5
 80024f8:	463b      	mov	r3, r7
 80024fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002502:	f000 b817 	b.w	8002534 <_write_r>

08002506 <__sseek>:
 8002506:	b510      	push	{r4, lr}
 8002508:	460c      	mov	r4, r1
 800250a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800250e:	f000 f845 	bl	800259c <_lseek_r>
 8002512:	1c43      	adds	r3, r0, #1
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	bf15      	itete	ne
 8002518:	6560      	strne	r0, [r4, #84]	; 0x54
 800251a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800251e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002522:	81a3      	strheq	r3, [r4, #12]
 8002524:	bf18      	it	ne
 8002526:	81a3      	strhne	r3, [r4, #12]
 8002528:	bd10      	pop	{r4, pc}

0800252a <__sclose>:
 800252a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252e:	f000 b813 	b.w	8002558 <_close_r>
	...

08002534 <_write_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4604      	mov	r4, r0
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	2200      	movs	r2, #0
 800253e:	4d05      	ldr	r5, [pc, #20]	; (8002554 <_write_r+0x20>)
 8002540:	602a      	str	r2, [r5, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f7fe f8ca 	bl	80006dc <_write>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_write_r+0x1e>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b103      	cbz	r3, 8002552 <_write_r+0x1e>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	200000f0 	.word	0x200000f0

08002558 <_close_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	2300      	movs	r3, #0
 800255c:	4d05      	ldr	r5, [pc, #20]	; (8002574 <_close_r+0x1c>)
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	602b      	str	r3, [r5, #0]
 8002564:	f7fe f8e6 	bl	8000734 <_close>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d102      	bne.n	8002572 <_close_r+0x1a>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	b103      	cbz	r3, 8002572 <_close_r+0x1a>
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	bd38      	pop	{r3, r4, r5, pc}
 8002574:	200000f0 	.word	0x200000f0

08002578 <_fstat_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	2300      	movs	r3, #0
 800257c:	4d06      	ldr	r5, [pc, #24]	; (8002598 <_fstat_r+0x20>)
 800257e:	4604      	mov	r4, r0
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	602b      	str	r3, [r5, #0]
 8002586:	f7fe f925 	bl	80007d4 <_fstat>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	d102      	bne.n	8002594 <_fstat_r+0x1c>
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	b103      	cbz	r3, 8002594 <_fstat_r+0x1c>
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	bd38      	pop	{r3, r4, r5, pc}
 8002596:	bf00      	nop
 8002598:	200000f0 	.word	0x200000f0

0800259c <_lseek_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	2200      	movs	r2, #0
 80025a6:	4d05      	ldr	r5, [pc, #20]	; (80025bc <_lseek_r+0x20>)
 80025a8:	602a      	str	r2, [r5, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f7fe f8d9 	bl	8000762 <_lseek>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d102      	bne.n	80025ba <_lseek_r+0x1e>
 80025b4:	682b      	ldr	r3, [r5, #0]
 80025b6:	b103      	cbz	r3, 80025ba <_lseek_r+0x1e>
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	200000f0 	.word	0x200000f0

080025c0 <__malloc_lock>:
 80025c0:	4801      	ldr	r0, [pc, #4]	; (80025c8 <__malloc_lock+0x8>)
 80025c2:	f7ff be8f 	b.w	80022e4 <__retarget_lock_acquire_recursive>
 80025c6:	bf00      	nop
 80025c8:	200000e8 	.word	0x200000e8

080025cc <__malloc_unlock>:
 80025cc:	4801      	ldr	r0, [pc, #4]	; (80025d4 <__malloc_unlock+0x8>)
 80025ce:	f7ff be8a 	b.w	80022e6 <__retarget_lock_release_recursive>
 80025d2:	bf00      	nop
 80025d4:	200000e8 	.word	0x200000e8

080025d8 <_read_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	4d05      	ldr	r5, [pc, #20]	; (80025f8 <_read_r+0x20>)
 80025e4:	602a      	str	r2, [r5, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7fe f8cc 	bl	8000784 <_read>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_read_r+0x1e>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_read_r+0x1e>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	200000f0 	.word	0x200000f0

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
